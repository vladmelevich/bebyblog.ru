{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Wlad\\\\OneDrive\\\\Desktop\\\\kwork_site\\\\src\\\\components\\\\ChatModal\\\\ChatModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane, faTimes, faTrash, faReply } from '@fortawesome/free-solid-svg-icons';\nimport chatWebSocket from '../../utils/chatWebSocket';\nimport { makeAuthenticatedRequest } from '../../utils/auth';\nimport './ChatModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatModal = ({\n  isOpen,\n  onClose,\n  userId,\n  userName,\n  onChatCreated\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingUser, setTypingUser] = useState(null);\n  const [showMessageMenu, setShowMessageMenu] = useState(null);\n  const [replyToMessage, setReplyToMessage] = useState(null);\n  const [clickedMessageId, setClickedMessageId] = useState(null);\n  const chatIdRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  useEffect(() => {\n    if (isOpen && userId) {\n      loadUserData();\n      loadChatMessages();\n      setupWebSocket();\n    }\n    return () => {\n      // Очистка при размонтировании\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      // chatWebSocket.leaveChat(); // Отключено для отладки\n    };\n  }, [isOpen, userId]);\n  const setupWebSocket = () => {\n    // Временно отключаем WebSocket для отладки\n    console.log('WebSocket setup skipped for debugging');\n    return;\n\n    // Подключаемся к WebSocket\n    chatWebSocket.connect();\n\n    // Присоединяемся к чату\n    chatWebSocket.joinChat(userId);\n\n    // Обработчики сообщений\n    chatWebSocket.onMessage('new_message', message => {\n      setMessages(prev => [...prev, message]);\n      scrollToBottom();\n    });\n    chatWebSocket.onMessage('user_typing', data => {\n      if (data.user_id !== getCurrentUserId()) {\n        setTypingUser(data.user_name);\n        setIsTyping(true);\n\n        // Автоматически скрываем индикатор через 3 секунды\n        setTimeout(() => {\n          setIsTyping(false);\n          setTypingUser(null);\n        }, 3000);\n      }\n    });\n    chatWebSocket.onMessage('user_stop_typing', data => {\n      if (data.user_id !== getCurrentUserId()) {\n        setIsTyping(false);\n        setTypingUser(null);\n      }\n    });\n  };\n  const getCurrentUserId = () => {\n    const userDataString = localStorage.getItem('userData') || sessionStorage.getItem('userData');\n    if (userDataString) {\n      try {\n        const userData = JSON.parse(userDataString);\n        return parseInt(userData.id);\n      } catch (error) {\n        console.error('Ошибка парсинга userData:', error);\n      }\n    }\n    return null;\n  };\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const handleAvatarClick = senderId => {\n    // Закрываем модальное окно и переходим на страницу профиля пользователя\n    onClose();\n    navigate(`/profile/${senderId}`);\n  };\n  const handleDeleteMessage = async messageId => {\n    try {\n      const response = await makeAuthenticatedRequest(`http://localhost:8000/api/users/async/chats/${userId}/messages/${messageId}/`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        // Удаляем сообщение из локального состояния\n        setMessages(prev => prev.filter(msg => msg.id !== messageId));\n        setShowMessageMenu(null);\n      } else {\n        console.error('Ошибка удаления сообщения:', response.status);\n      }\n    } catch (error) {\n      console.error('Ошибка удаления сообщения:', error);\n    }\n  };\n  const handleReplyToMessage = message => {\n    setReplyToMessage(message);\n    setShowMessageMenu(null);\n  };\n  const cancelReply = () => {\n    setReplyToMessage(null);\n  };\n  const loadUserData = async () => {\n    try {\n      const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\n      const response = await fetch(`http://localhost:8000/api/users/${userId}/`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.user) {\n          setUser(data.user);\n        }\n      }\n    } catch (error) {\n      console.error('Ошибка загрузки данных пользователя:', error);\n    }\n  };\n  const loadChatMessages = async () => {\n    try {\n      console.log('Loading chat messages...');\n\n      // Сначала проверяем, есть ли уже чат с этим пользователем\n      const chatResponse = await makeAuthenticatedRequest(`http://localhost:8000/api/users/async/chats/`);\n      if (chatResponse.ok) {\n        const chatData = await chatResponse.json();\n        console.log('Chat data received:', chatData);\n        const existingChat = chatData.chats.find(chat => chat.participants.some(p => p.id === parseInt(userId)));\n        if (existingChat) {\n          chatIdRef.current = existingChat.id;\n          // Загружаем сообщения существующего чата\n          const messagesResponse = await makeAuthenticatedRequest(`http://localhost:8000/api/users/async/chats/${userId}/messages/`);\n          if (messagesResponse.ok) {\n            const messagesData = await messagesResponse.json();\n            console.log('Загружены сообщения:', messagesData);\n            if (messagesData.success && messagesData.messages) {\n              setMessages(messagesData.messages);\n            }\n          } else {\n            console.error('Ошибка загрузки сообщений:', messagesResponse.status, await messagesResponse.text());\n          }\n        } else {\n          // Чат не существует, показываем пустой список\n          setMessages([]);\n        }\n      } else {\n        console.error('Ошибка загрузки чатов:', chatResponse.status, await chatResponse.text());\n      }\n    } catch (error) {\n      console.error('Ошибка загрузки сообщений:', error);\n      setMessages([]);\n    }\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!newMessage.trim()) return;\n    const messageContent = newMessage.trim();\n    setNewMessage('');\n    try {\n      // Отправляем сообщение через API\n      const response = await makeAuthenticatedRequest(`http://localhost:8000/api/users/async/chats/${userId}/messages/create/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: messageContent,\n          message_type: 'text',\n          reply_to: replyToMessage ? replyToMessage.id : null\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.message) {\n          // Добавляем сообщение в локальное состояние\n          setMessages(prev => [...prev, data.message]);\n          scrollToBottom();\n\n          // Сбрасываем ответ на сообщение\n          if (replyToMessage) {\n            setReplyToMessage(null);\n          }\n        }\n      } else {\n        console.error('Ошибка отправки сообщения:', response.status);\n      }\n    } catch (error) {\n      console.error('Ошибка отправки сообщения:', error);\n    }\n\n    // Останавливаем индикатор печати (отключено для отладки)\n    // chatWebSocket.stopTyping(userId);\n  };\n  const handleInputChange = e => {\n    setNewMessage(e.target.value);\n\n    // Управление индикатором печати (отключено для отладки)\n    // if (e.target.value.trim()) {\n    //   chatWebSocket.startTyping(userId);\n    //   \n    //   // Очищаем предыдущий таймаут\n    //   if (typingTimeoutRef.current) {\n    //     clearTimeout(typingTimeoutRef.current);\n    //   }\n    //   \n    //   // Устанавливаем новый таймаут для остановки индикатора\n    //   typingTimeoutRef.current = setTimeout(() => {\n    //     chatWebSocket.stopTyping(userId);\n    //   }, 1000);\n    // } else {\n    //   chatWebSocket.stopTyping(userId);\n    //   if (typingTimeoutRef.current) {\n    //     clearTimeout(typingTimeoutRef.current);\n    //   }\n    // }\n  };\n  if (!isOpen) return null;\n  const displayName = user ? user.first_name && user.last_name ? `${user.first_name} ${user.last_name}` : user.first_name || user.username || 'Пользователь' : userName || 'Пользователь';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-modal-overlay\",\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-modal\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-user-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"user-name\",\n            children: displayName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"user-status\",\n            children: \"\\u0411\\u044B\\u043B\\u0430 \\u043E\\u043D\\u043B\\u0430\\u0439\\u043D: 3 \\u043C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: onClose,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faTimes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-modal-messages\",\n        children: messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-messages\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"empty-title\",\n            children: \"\\u0421\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0439 \\u043D\\u0435\\u0442.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"empty-subtitle\",\n            children: \"\\u0421\\u043E\\u0431\\u0435\\u0441\\u0435\\u0434\\u043D\\u0438\\u043A \\u043D\\u0435 \\u0432\\u0438\\u0434\\u0438\\u0442 \\u044D\\u0442\\u0443 \\u043F\\u0435\\u0440\\u0435\\u043F\\u0438\\u0441\\u043A\\u0443.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-list\",\n          children: [messages.map(message => {\n            // Получаем ID пользователя из userData\n            const userDataString = localStorage.getItem('userData') || sessionStorage.getItem('userData');\n            let currentUserId = null;\n            if (userDataString) {\n              try {\n                const userData = JSON.parse(userDataString);\n                currentUserId = parseInt(userData.id);\n              } catch (error) {\n                console.error('Ошибка парсинга userData:', error);\n              }\n            }\n            const messageSenderId = parseInt(message.sender);\n            const isMyMessage = messageSenderId === currentUserId;\n\n            // Получаем информацию об отправителе\n            const senderInfo = message.sender_info || {};\n            const senderName = senderInfo.first_name && senderInfo.last_name ? `${senderInfo.first_name} ${senderInfo.last_name}` : senderInfo.first_name || senderInfo.username || 'Пользователь';\n            const senderAvatar = senderInfo.avatar || '/images/default-avatar.svg';\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${isMyMessage ? 'my-message' : 'incoming-message'}`,\n              children: [!isMyMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-avatar clickable-avatar\",\n                onClick: () => handleAvatarClick(messageSenderId),\n                title: `Перейти к профилю ${senderName}`,\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: senderAvatar,\n                  alt: senderName,\n                  onError: e => {\n                    e.target.src = '/images/default-avatar.svg';\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 325,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-wrapper\",\n                children: [!isMyMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-sender-name clickable-name\",\n                  onClick: () => handleAvatarClick(messageSenderId),\n                  title: `Перейти к профилю ${senderName}`,\n                  children: senderName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-content\",\n                  style: isMyMessage ? {\n                    backgroundColor: '#007bff',\n                    color: 'white'\n                  } : {\n                    backgroundColor: '#ffffff',\n                    color: 'black'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: message.content\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"message-time\",\n                    children: new Date(message.created_at).toLocaleTimeString('ru-RU', {\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 346,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 21\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 19\n            }, this);\n          }), isTyping && typingUser && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"typing-dots\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"typing-text\",\n              children: [typingUser, \" \\u043F\\u0435\\u0447\\u0430\\u0442\\u0430\\u0435\\u0442...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-modal-input\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"message-input\",\n            placeholder: \"\\u0412\\u0430\\u0448\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n            value: newMessage,\n            onChange: handleInputChange,\n            onKeyPress: e => e.key === 'Enter' && handleSendMessage(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"send-button\",\n            onClick: handleSendMessage,\n            disabled: !newMessage.trim() || loading,\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faPaperPlane\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatModal, \"10dbVJc89YwUeibYmebJT3xSh48=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatModal;\nexport default ChatModal;\nvar _c;\n$RefreshReg$(_c, \"ChatModal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","FontAwesomeIcon","faPaperPlane","faTimes","faTrash","faReply","chatWebSocket","makeAuthenticatedRequest","jsxDEV","_jsxDEV","ChatModal","isOpen","onClose","userId","userName","onChatCreated","_s","navigate","messages","setMessages","newMessage","setNewMessage","user","setUser","loading","setLoading","isTyping","setIsTyping","typingUser","setTypingUser","showMessageMenu","setShowMessageMenu","replyToMessage","setReplyToMessage","clickedMessageId","setClickedMessageId","chatIdRef","messagesEndRef","typingTimeoutRef","loadUserData","loadChatMessages","setupWebSocket","current","clearTimeout","console","log","connect","joinChat","onMessage","message","prev","scrollToBottom","data","user_id","getCurrentUserId","user_name","setTimeout","userDataString","localStorage","getItem","sessionStorage","userData","JSON","parse","parseInt","id","error","_messagesEndRef$curre","scrollIntoView","behavior","handleAvatarClick","senderId","handleDeleteMessage","messageId","response","method","ok","filter","msg","status","handleReplyToMessage","cancelReply","token","fetch","headers","json","success","chatResponse","chatData","existingChat","chats","find","chat","participants","some","p","messagesResponse","messagesData","text","handleSendMessage","e","preventDefault","trim","messageContent","body","stringify","content","message_type","reply_to","handleInputChange","target","value","displayName","first_name","last_name","username","className","onClick","children","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","icon","length","map","currentUserId","messageSenderId","sender","isMyMessage","senderInfo","sender_info","senderName","senderAvatar","avatar","title","src","alt","onError","style","backgroundColor","color","Date","created_at","toLocaleTimeString","hour","minute","ref","type","placeholder","onChange","onKeyPress","key","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Wlad/OneDrive/Desktop/kwork_site/src/components/ChatModal/ChatModal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane, faTimes, faTrash, faReply } from '@fortawesome/free-solid-svg-icons';\nimport chatWebSocket from '../../utils/chatWebSocket';\nimport { makeAuthenticatedRequest } from '../../utils/auth';\nimport './ChatModal.css';\n\nconst ChatModal = ({ isOpen, onClose, userId, userName, onChatCreated }) => {\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingUser, setTypingUser] = useState(null);\n  const [showMessageMenu, setShowMessageMenu] = useState(null);\n  const [replyToMessage, setReplyToMessage] = useState(null);\n  const [clickedMessageId, setClickedMessageId] = useState(null);\n  const chatIdRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  useEffect(() => {\n    if (isOpen && userId) {\n      loadUserData();\n      loadChatMessages();\n      setupWebSocket();\n    }\n\n    return () => {\n      // Очистка при размонтировании\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      // chatWebSocket.leaveChat(); // Отключено для отладки\n    };\n  }, [isOpen, userId]);\n\n  const setupWebSocket = () => {\n    // Временно отключаем WebSocket для отладки\n    console.log('WebSocket setup skipped for debugging');\n    return;\n    \n    // Подключаемся к WebSocket\n    chatWebSocket.connect();\n\n    // Присоединяемся к чату\n    chatWebSocket.joinChat(userId);\n\n    // Обработчики сообщений\n    chatWebSocket.onMessage('new_message', (message) => {\n      setMessages(prev => [...prev, message]);\n      scrollToBottom();\n    });\n\n    chatWebSocket.onMessage('user_typing', (data) => {\n      if (data.user_id !== getCurrentUserId()) {\n        setTypingUser(data.user_name);\n        setIsTyping(true);\n        \n        // Автоматически скрываем индикатор через 3 секунды\n        setTimeout(() => {\n          setIsTyping(false);\n          setTypingUser(null);\n        }, 3000);\n      }\n    });\n\n    chatWebSocket.onMessage('user_stop_typing', (data) => {\n      if (data.user_id !== getCurrentUserId()) {\n        setIsTyping(false);\n        setTypingUser(null);\n      }\n    });\n  };\n\n  const getCurrentUserId = () => {\n    const userDataString = localStorage.getItem('userData') || sessionStorage.getItem('userData');\n    if (userDataString) {\n      try {\n        const userData = JSON.parse(userDataString);\n        return parseInt(userData.id);\n      } catch (error) {\n        console.error('Ошибка парсинга userData:', error);\n      }\n    }\n    return null;\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const handleAvatarClick = (senderId) => {\n    // Закрываем модальное окно и переходим на страницу профиля пользователя\n    onClose();\n    navigate(`/profile/${senderId}`);\n  };\n\n  const handleDeleteMessage = async (messageId) => {\n    try {\n      const response = await makeAuthenticatedRequest(\n        `http://localhost:8000/api/users/async/chats/${userId}/messages/${messageId}/`,\n        {\n          method: 'DELETE'\n        }\n      );\n\n      if (response.ok) {\n        // Удаляем сообщение из локального состояния\n        setMessages(prev => prev.filter(msg => msg.id !== messageId));\n        setShowMessageMenu(null);\n      } else {\n        console.error('Ошибка удаления сообщения:', response.status);\n      }\n    } catch (error) {\n      console.error('Ошибка удаления сообщения:', error);\n    }\n  };\n\n  const handleReplyToMessage = (message) => {\n    setReplyToMessage(message);\n    setShowMessageMenu(null);\n  };\n\n  const cancelReply = () => {\n    setReplyToMessage(null);\n  };\n\n  const loadUserData = async () => {\n    try {\n      const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\n      const response = await fetch(`http://localhost:8000/api/users/${userId}/`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.user) {\n          setUser(data.user);\n        }\n      }\n    } catch (error) {\n      console.error('Ошибка загрузки данных пользователя:', error);\n    }\n  };\n\n  const loadChatMessages = async () => {\n    try {\n      console.log('Loading chat messages...');\n      \n      // Сначала проверяем, есть ли уже чат с этим пользователем\n      const chatResponse = await makeAuthenticatedRequest(`http://localhost:8000/api/users/async/chats/`);\n\n      if (chatResponse.ok) {\n        const chatData = await chatResponse.json();\n        console.log('Chat data received:', chatData);\n        const existingChat = chatData.chats.find(chat => \n          chat.participants.some(p => p.id === parseInt(userId))\n        );\n        \n        if (existingChat) {\n          chatIdRef.current = existingChat.id;\n          // Загружаем сообщения существующего чата\n          const messagesResponse = await makeAuthenticatedRequest(`http://localhost:8000/api/users/async/chats/${userId}/messages/`);\n          \n          if (messagesResponse.ok) {\n            const messagesData = await messagesResponse.json();\n            console.log('Загружены сообщения:', messagesData);\n            if (messagesData.success && messagesData.messages) {\n              setMessages(messagesData.messages);\n            }\n          } else {\n            console.error('Ошибка загрузки сообщений:', messagesResponse.status, await messagesResponse.text());\n          }\n        } else {\n          // Чат не существует, показываем пустой список\n          setMessages([]);\n        }\n      } else {\n        console.error('Ошибка загрузки чатов:', chatResponse.status, await chatResponse.text());\n      }\n    } catch (error) {\n      console.error('Ошибка загрузки сообщений:', error);\n      setMessages([]);\n    }\n  };\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    if (!newMessage.trim()) return;\n\n    const messageContent = newMessage.trim();\n    setNewMessage('');\n    \n    try {\n      // Отправляем сообщение через API\n      const response = await makeAuthenticatedRequest(\n        `http://localhost:8000/api/users/async/chats/${userId}/messages/create/`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            content: messageContent,\n            message_type: 'text',\n            reply_to: replyToMessage ? replyToMessage.id : null\n          })\n        }\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.message) {\n          // Добавляем сообщение в локальное состояние\n          setMessages(prev => [...prev, data.message]);\n          scrollToBottom();\n          \n          // Сбрасываем ответ на сообщение\n          if (replyToMessage) {\n            setReplyToMessage(null);\n          }\n        }\n      } else {\n        console.error('Ошибка отправки сообщения:', response.status);\n      }\n    } catch (error) {\n      console.error('Ошибка отправки сообщения:', error);\n    }\n    \n    // Останавливаем индикатор печати (отключено для отладки)\n    // chatWebSocket.stopTyping(userId);\n  };\n\n  const handleInputChange = (e) => {\n    setNewMessage(e.target.value);\n    \n    // Управление индикатором печати (отключено для отладки)\n    // if (e.target.value.trim()) {\n    //   chatWebSocket.startTyping(userId);\n    //   \n    //   // Очищаем предыдущий таймаут\n    //   if (typingTimeoutRef.current) {\n    //     clearTimeout(typingTimeoutRef.current);\n    //   }\n    //   \n    //   // Устанавливаем новый таймаут для остановки индикатора\n    //   typingTimeoutRef.current = setTimeout(() => {\n    //     chatWebSocket.stopTyping(userId);\n    //   }, 1000);\n    // } else {\n    //   chatWebSocket.stopTyping(userId);\n    //   if (typingTimeoutRef.current) {\n    //     clearTimeout(typingTimeoutRef.current);\n    //   }\n    // }\n  };\n\n  if (!isOpen) return null;\n\n  const displayName = user ? \n    (user.first_name && user.last_name ? `${user.first_name} ${user.last_name}` : \n     user.first_name || user.username || 'Пользователь') : \n    userName || 'Пользователь';\n\n  return (\n    <div className=\"chat-modal-overlay\" onClick={onClose}>\n      <div className=\"chat-modal\" onClick={(e) => e.stopPropagation()}>\n        {/* Заголовок модального окна */}\n        <div className=\"chat-modal-header\">\n          <div className=\"chat-user-info\">\n            <h3 className=\"user-name\">{displayName}</h3>\n            <p className=\"user-status\">Была онлайн: 3 м</p>\n          </div>\n          <button className=\"close-button\" onClick={onClose}>\n            <FontAwesomeIcon icon={faTimes} />\n          </button>\n        </div>\n\n        {/* Контейнер сообщений */}\n        <div className=\"chat-modal-messages\">\n          {messages.length === 0 ? (\n            <div className=\"empty-messages\">\n              <p className=\"empty-title\">Сообщений нет.</p>\n              <p className=\"empty-subtitle\">Собеседник не видит эту переписку.</p>\n            </div>\n          ) : (\n            <div className=\"messages-list\">\n              {messages.map((message) => {\n                // Получаем ID пользователя из userData\n                const userDataString = localStorage.getItem('userData') || sessionStorage.getItem('userData');\n                let currentUserId = null;\n                if (userDataString) {\n                  try {\n                    const userData = JSON.parse(userDataString);\n                    currentUserId = parseInt(userData.id);\n                  } catch (error) {\n                    console.error('Ошибка парсинга userData:', error);\n                  }\n                }\n                \n                const messageSenderId = parseInt(message.sender);\n                const isMyMessage = messageSenderId === currentUserId;\n                \n                // Получаем информацию об отправителе\n                const senderInfo = message.sender_info || {};\n                const senderName = senderInfo.first_name && senderInfo.last_name \n                  ? `${senderInfo.first_name} ${senderInfo.last_name}`\n                  : senderInfo.first_name || senderInfo.username || 'Пользователь';\n                const senderAvatar = senderInfo.avatar || '/images/default-avatar.svg';\n\n                return (\n                  <div key={message.id} className={`message ${isMyMessage ? 'my-message' : 'incoming-message'}`}>\n                    {!isMyMessage && (\n                      <div \n                        className=\"message-avatar clickable-avatar\"\n                        onClick={() => handleAvatarClick(messageSenderId)}\n                        title={`Перейти к профилю ${senderName}`}\n                      >\n                        <img \n                          src={senderAvatar} \n                          alt={senderName}\n                          onError={(e) => {\n                            e.target.src = '/images/default-avatar.svg';\n                          }}\n                        />\n                      </div>\n                    )}\n                    <div className=\"message-wrapper\">\n                      {!isMyMessage && (\n                        <div \n                          className=\"message-sender-name clickable-name\"\n                          onClick={() => handleAvatarClick(messageSenderId)}\n                          title={`Перейти к профилю ${senderName}`}\n                        >\n                          {senderName}\n                        </div>\n                      )}\n                      <div className=\"message-content\" style={isMyMessage ? {backgroundColor: '#007bff', color: 'white'} : {backgroundColor: '#ffffff', color: 'black'}}>\n                        <p>{message.content}</p>\n                        <span className=\"message-time\">\n                          {new Date(message.created_at).toLocaleTimeString('ru-RU', {\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n              \n              {/* Индикатор печати */}\n              {isTyping && typingUser && (\n                <div className=\"typing-indicator\">\n                  <div className=\"typing-dots\">\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                  </div>\n                  <span className=\"typing-text\">{typingUser} печатает...</span>\n                </div>\n              )}\n              \n              {/* Элемент для автоматической прокрутки */}\n              <div ref={messagesEndRef} />\n            </div>\n          )}\n        </div>\n\n        {/* Поле ввода сообщения */}\n        <div className=\"chat-modal-input\">\n          <div className=\"message-input-wrapper\">\n            <input\n              type=\"text\"\n              className=\"message-input\"\n              placeholder=\"Ваше сообщение\"\n              value={newMessage}\n              onChange={handleInputChange}\n              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage(e)}\n            />\n            <button \n              className=\"send-button\" \n              onClick={handleSendMessage}\n              disabled={!newMessage.trim() || loading}\n            >\n              <FontAwesomeIcon icon={faPaperPlane} />\n              <span>Отправить</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatModal;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,YAAY,EAAEC,OAAO,EAAEC,OAAO,EAAEC,OAAO,QAAQ,mCAAmC;AAC3F,OAAOC,aAAa,MAAM,2BAA2B;AACrD,SAASC,wBAAwB,QAAQ,kBAAkB;AAC3D,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAC;EAAEC,MAAM;EAAEC,OAAO;EAAEC,MAAM;EAAEC,QAAQ;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC1E,MAAMC,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACuB,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACyB,IAAI,EAAEC,OAAO,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAAC2B,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC+B,UAAU,EAAEC,aAAa,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACiC,eAAe,EAAEC,kBAAkB,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACmC,cAAc,EAAEC,iBAAiB,CAAC,GAAGpC,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACqC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtC,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAMuC,SAAS,GAAGrC,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMsC,cAAc,GAAGtC,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMuC,gBAAgB,GAAGvC,MAAM,CAAC,IAAI,CAAC;EAErCD,SAAS,CAAC,MAAM;IACd,IAAIa,MAAM,IAAIE,MAAM,EAAE;MACpB0B,YAAY,CAAC,CAAC;MACdC,gBAAgB,CAAC,CAAC;MAClBC,cAAc,CAAC,CAAC;IAClB;IAEA,OAAO,MAAM;MACX;MACA,IAAIH,gBAAgB,CAACI,OAAO,EAAE;QAC5BC,YAAY,CAACL,gBAAgB,CAACI,OAAO,CAAC;MACxC;MACA;IACF,CAAC;EACH,CAAC,EAAE,CAAC/B,MAAM,EAAEE,MAAM,CAAC,CAAC;EAEpB,MAAM4B,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACAG,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpD;;IAEA;IACAvC,aAAa,CAACwC,OAAO,CAAC,CAAC;;IAEvB;IACAxC,aAAa,CAACyC,QAAQ,CAAClC,MAAM,CAAC;;IAE9B;IACAP,aAAa,CAAC0C,SAAS,CAAC,aAAa,EAAGC,OAAO,IAAK;MAClD9B,WAAW,CAAC+B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,OAAO,CAAC,CAAC;MACvCE,cAAc,CAAC,CAAC;IAClB,CAAC,CAAC;IAEF7C,aAAa,CAAC0C,SAAS,CAAC,aAAa,EAAGI,IAAI,IAAK;MAC/C,IAAIA,IAAI,CAACC,OAAO,KAAKC,gBAAgB,CAAC,CAAC,EAAE;QACvCzB,aAAa,CAACuB,IAAI,CAACG,SAAS,CAAC;QAC7B5B,WAAW,CAAC,IAAI,CAAC;;QAEjB;QACA6B,UAAU,CAAC,MAAM;UACf7B,WAAW,CAAC,KAAK,CAAC;UAClBE,aAAa,CAAC,IAAI,CAAC;QACrB,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC,CAAC;IAEFvB,aAAa,CAAC0C,SAAS,CAAC,kBAAkB,EAAGI,IAAI,IAAK;MACpD,IAAIA,IAAI,CAACC,OAAO,KAAKC,gBAAgB,CAAC,CAAC,EAAE;QACvC3B,WAAW,CAAC,KAAK,CAAC;QAClBE,aAAa,CAAC,IAAI,CAAC;MACrB;IACF,CAAC,CAAC;EACJ,CAAC;EAED,MAAMyB,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMG,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,UAAU,CAAC;IAC7F,IAAIF,cAAc,EAAE;MAClB,IAAI;QACF,MAAMI,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACN,cAAc,CAAC;QAC3C,OAAOO,QAAQ,CAACH,QAAQ,CAACI,EAAE,CAAC;MAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdtB,OAAO,CAACsB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF;IACA,OAAO,IAAI;EACb,CAAC;EAED,MAAMf,cAAc,GAAGA,CAAA,KAAM;IAAA,IAAAgB,qBAAA;IAC3B,CAAAA,qBAAA,GAAA9B,cAAc,CAACK,OAAO,cAAAyB,qBAAA,uBAAtBA,qBAAA,CAAwBC,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC;EAED,MAAMC,iBAAiB,GAAIC,QAAQ,IAAK;IACtC;IACA3D,OAAO,CAAC,CAAC;IACTK,QAAQ,CAAC,YAAYsD,QAAQ,EAAE,CAAC;EAClC,CAAC;EAED,MAAMC,mBAAmB,GAAG,MAAOC,SAAS,IAAK;IAC/C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMnE,wBAAwB,CAC7C,+CAA+CM,MAAM,aAAa4D,SAAS,GAAG,EAC9E;QACEE,MAAM,EAAE;MACV,CACF,CAAC;MAED,IAAID,QAAQ,CAACE,EAAE,EAAE;QACf;QACAzD,WAAW,CAAC+B,IAAI,IAAIA,IAAI,CAAC2B,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACb,EAAE,KAAKQ,SAAS,CAAC,CAAC;QAC7D1C,kBAAkB,CAAC,IAAI,CAAC;MAC1B,CAAC,MAAM;QACLa,OAAO,CAACsB,KAAK,CAAC,4BAA4B,EAAEQ,QAAQ,CAACK,MAAM,CAAC;MAC9D;IACF,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdtB,OAAO,CAACsB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC;EAED,MAAMc,oBAAoB,GAAI/B,OAAO,IAAK;IACxChB,iBAAiB,CAACgB,OAAO,CAAC;IAC1BlB,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAMkD,WAAW,GAAGA,CAAA,KAAM;IACxBhD,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,MAAMM,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAM2C,KAAK,GAAGxB,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,aAAa,CAAC;MAC1F,MAAMe,QAAQ,GAAG,MAAMS,KAAK,CAAC,mCAAmCtE,MAAM,GAAG,EAAE;QACzEuE,OAAO,EAAE;UACP,eAAe,EAAE,UAAUF,KAAK,EAAE;UAClC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAIR,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMxB,IAAI,GAAG,MAAMsB,QAAQ,CAACW,IAAI,CAAC,CAAC;QAClC,IAAIjC,IAAI,CAACkC,OAAO,IAAIlC,IAAI,CAAC9B,IAAI,EAAE;UAC7BC,OAAO,CAAC6B,IAAI,CAAC9B,IAAI,CAAC;QACpB;MACF;IACF,CAAC,CAAC,OAAO4C,KAAK,EAAE;MACdtB,OAAO,CAACsB,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D;EACF,CAAC;EAED,MAAM1B,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACFI,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;MAEvC;MACA,MAAM0C,YAAY,GAAG,MAAMhF,wBAAwB,CAAC,8CAA8C,CAAC;MAEnG,IAAIgF,YAAY,CAACX,EAAE,EAAE;QACnB,MAAMY,QAAQ,GAAG,MAAMD,YAAY,CAACF,IAAI,CAAC,CAAC;QAC1CzC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE2C,QAAQ,CAAC;QAC5C,MAAMC,YAAY,GAAGD,QAAQ,CAACE,KAAK,CAACC,IAAI,CAACC,IAAI,IAC3CA,IAAI,CAACC,YAAY,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC9B,EAAE,KAAKD,QAAQ,CAACnD,MAAM,CAAC,CACvD,CAAC;QAED,IAAI4E,YAAY,EAAE;UAChBrD,SAAS,CAACM,OAAO,GAAG+C,YAAY,CAACxB,EAAE;UACnC;UACA,MAAM+B,gBAAgB,GAAG,MAAMzF,wBAAwB,CAAC,+CAA+CM,MAAM,YAAY,CAAC;UAE1H,IAAImF,gBAAgB,CAACpB,EAAE,EAAE;YACvB,MAAMqB,YAAY,GAAG,MAAMD,gBAAgB,CAACX,IAAI,CAAC,CAAC;YAClDzC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEoD,YAAY,CAAC;YACjD,IAAIA,YAAY,CAACX,OAAO,IAAIW,YAAY,CAAC/E,QAAQ,EAAE;cACjDC,WAAW,CAAC8E,YAAY,CAAC/E,QAAQ,CAAC;YACpC;UACF,CAAC,MAAM;YACL0B,OAAO,CAACsB,KAAK,CAAC,4BAA4B,EAAE8B,gBAAgB,CAACjB,MAAM,EAAE,MAAMiB,gBAAgB,CAACE,IAAI,CAAC,CAAC,CAAC;UACrG;QACF,CAAC,MAAM;UACL;UACA/E,WAAW,CAAC,EAAE,CAAC;QACjB;MACF,CAAC,MAAM;QACLyB,OAAO,CAACsB,KAAK,CAAC,wBAAwB,EAAEqB,YAAY,CAACR,MAAM,EAAE,MAAMQ,YAAY,CAACW,IAAI,CAAC,CAAC,CAAC;MACzF;IACF,CAAC,CAAC,OAAOhC,KAAK,EAAE;MACdtB,OAAO,CAACsB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD/C,WAAW,CAAC,EAAE,CAAC;IACjB;EACF,CAAC;EAED,MAAMgF,iBAAiB,GAAG,MAAOC,CAAC,IAAK;IACrCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACjF,UAAU,CAACkF,IAAI,CAAC,CAAC,EAAE;IAExB,MAAMC,cAAc,GAAGnF,UAAU,CAACkF,IAAI,CAAC,CAAC;IACxCjF,aAAa,CAAC,EAAE,CAAC;IAEjB,IAAI;MACF;MACA,MAAMqD,QAAQ,GAAG,MAAMnE,wBAAwB,CAC7C,+CAA+CM,MAAM,mBAAmB,EACxE;QACE8D,MAAM,EAAE,MAAM;QACdS,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDoB,IAAI,EAAE1C,IAAI,CAAC2C,SAAS,CAAC;UACnBC,OAAO,EAAEH,cAAc;UACvBI,YAAY,EAAE,MAAM;UACpBC,QAAQ,EAAE5E,cAAc,GAAGA,cAAc,CAACiC,EAAE,GAAG;QACjD,CAAC;MACH,CACF,CAAC;MAED,IAAIS,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMxB,IAAI,GAAG,MAAMsB,QAAQ,CAACW,IAAI,CAAC,CAAC;QAClC,IAAIjC,IAAI,CAACkC,OAAO,IAAIlC,IAAI,CAACH,OAAO,EAAE;UAChC;UACA9B,WAAW,CAAC+B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEE,IAAI,CAACH,OAAO,CAAC,CAAC;UAC5CE,cAAc,CAAC,CAAC;;UAEhB;UACA,IAAInB,cAAc,EAAE;YAClBC,iBAAiB,CAAC,IAAI,CAAC;UACzB;QACF;MACF,CAAC,MAAM;QACLW,OAAO,CAACsB,KAAK,CAAC,4BAA4B,EAAEQ,QAAQ,CAACK,MAAM,CAAC;MAC9D;IACF,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdtB,OAAO,CAACsB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;;IAEA;IACA;EACF,CAAC;EAED,MAAM2C,iBAAiB,GAAIT,CAAC,IAAK;IAC/B/E,aAAa,CAAC+E,CAAC,CAACU,MAAM,CAACC,KAAK,CAAC;;IAE7B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;EAED,IAAI,CAACpG,MAAM,EAAE,OAAO,IAAI;EAExB,MAAMqG,WAAW,GAAG1F,IAAI,GACrBA,IAAI,CAAC2F,UAAU,IAAI3F,IAAI,CAAC4F,SAAS,GAAG,GAAG5F,IAAI,CAAC2F,UAAU,IAAI3F,IAAI,CAAC4F,SAAS,EAAE,GAC1E5F,IAAI,CAAC2F,UAAU,IAAI3F,IAAI,CAAC6F,QAAQ,IAAI,cAAc,GACnDrG,QAAQ,IAAI,cAAc;EAE5B,oBACEL,OAAA;IAAK2G,SAAS,EAAC,oBAAoB;IAACC,OAAO,EAAEzG,OAAQ;IAAA0G,QAAA,eACnD7G,OAAA;MAAK2G,SAAS,EAAC,YAAY;MAACC,OAAO,EAAGjB,CAAC,IAAKA,CAAC,CAACmB,eAAe,CAAC,CAAE;MAAAD,QAAA,gBAE9D7G,OAAA;QAAK2G,SAAS,EAAC,mBAAmB;QAAAE,QAAA,gBAChC7G,OAAA;UAAK2G,SAAS,EAAC,gBAAgB;UAAAE,QAAA,gBAC7B7G,OAAA;YAAI2G,SAAS,EAAC,WAAW;YAAAE,QAAA,EAAEN;UAAW;YAAAQ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC5ClH,OAAA;YAAG2G,SAAS,EAAC,aAAa;YAAAE,QAAA,EAAC;UAAgB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5C,CAAC,eACNlH,OAAA;UAAQ2G,SAAS,EAAC,cAAc;UAACC,OAAO,EAAEzG,OAAQ;UAAA0G,QAAA,eAChD7G,OAAA,CAACR,eAAe;YAAC2H,IAAI,EAAEzH;UAAQ;YAAAqH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eAGNlH,OAAA;QAAK2G,SAAS,EAAC,qBAAqB;QAAAE,QAAA,EACjCpG,QAAQ,CAAC2G,MAAM,KAAK,CAAC,gBACpBpH,OAAA;UAAK2G,SAAS,EAAC,gBAAgB;UAAAE,QAAA,gBAC7B7G,OAAA;YAAG2G,SAAS,EAAC,aAAa;YAAAE,QAAA,EAAC;UAAc;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAC7ClH,OAAA;YAAG2G,SAAS,EAAC,gBAAgB;YAAAE,QAAA,EAAC;UAAkC;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE,CAAC,gBAENlH,OAAA;UAAK2G,SAAS,EAAC,eAAe;UAAAE,QAAA,GAC3BpG,QAAQ,CAAC4G,GAAG,CAAE7E,OAAO,IAAK;YACzB;YACA,MAAMQ,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,UAAU,CAAC;YAC7F,IAAIoE,aAAa,GAAG,IAAI;YACxB,IAAItE,cAAc,EAAE;cAClB,IAAI;gBACF,MAAMI,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACN,cAAc,CAAC;gBAC3CsE,aAAa,GAAG/D,QAAQ,CAACH,QAAQ,CAACI,EAAE,CAAC;cACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;gBACdtB,OAAO,CAACsB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;cACnD;YACF;YAEA,MAAM8D,eAAe,GAAGhE,QAAQ,CAACf,OAAO,CAACgF,MAAM,CAAC;YAChD,MAAMC,WAAW,GAAGF,eAAe,KAAKD,aAAa;;YAErD;YACA,MAAMI,UAAU,GAAGlF,OAAO,CAACmF,WAAW,IAAI,CAAC,CAAC;YAC5C,MAAMC,UAAU,GAAGF,UAAU,CAAClB,UAAU,IAAIkB,UAAU,CAACjB,SAAS,GAC5D,GAAGiB,UAAU,CAAClB,UAAU,IAAIkB,UAAU,CAACjB,SAAS,EAAE,GAClDiB,UAAU,CAAClB,UAAU,IAAIkB,UAAU,CAAChB,QAAQ,IAAI,cAAc;YAClE,MAAMmB,YAAY,GAAGH,UAAU,CAACI,MAAM,IAAI,4BAA4B;YAEtE,oBACE9H,OAAA;cAAsB2G,SAAS,EAAE,WAAWc,WAAW,GAAG,YAAY,GAAG,kBAAkB,EAAG;cAAAZ,QAAA,GAC3F,CAACY,WAAW,iBACXzH,OAAA;gBACE2G,SAAS,EAAC,iCAAiC;gBAC3CC,OAAO,EAAEA,CAAA,KAAM/C,iBAAiB,CAAC0D,eAAe,CAAE;gBAClDQ,KAAK,EAAE,qBAAqBH,UAAU,EAAG;gBAAAf,QAAA,eAEzC7G,OAAA;kBACEgI,GAAG,EAAEH,YAAa;kBAClBI,GAAG,EAAEL,UAAW;kBAChBM,OAAO,EAAGvC,CAAC,IAAK;oBACdA,CAAC,CAACU,MAAM,CAAC2B,GAAG,GAAG,4BAA4B;kBAC7C;gBAAE;kBAAAjB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CACN,eACDlH,OAAA;gBAAK2G,SAAS,EAAC,iBAAiB;gBAAAE,QAAA,GAC7B,CAACY,WAAW,iBACXzH,OAAA;kBACE2G,SAAS,EAAC,oCAAoC;kBAC9CC,OAAO,EAAEA,CAAA,KAAM/C,iBAAiB,CAAC0D,eAAe,CAAE;kBAClDQ,KAAK,EAAE,qBAAqBH,UAAU,EAAG;kBAAAf,QAAA,EAExCe;gBAAU;kBAAAb,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACR,CACN,eACDlH,OAAA;kBAAK2G,SAAS,EAAC,iBAAiB;kBAACwB,KAAK,EAAEV,WAAW,GAAG;oBAACW,eAAe,EAAE,SAAS;oBAAEC,KAAK,EAAE;kBAAO,CAAC,GAAG;oBAACD,eAAe,EAAE,SAAS;oBAAEC,KAAK,EAAE;kBAAO,CAAE;kBAAAxB,QAAA,gBAChJ7G,OAAA;oBAAA6G,QAAA,EAAIrE,OAAO,CAACyD;kBAAO;oBAAAc,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAI,CAAC,eACxBlH,OAAA;oBAAM2G,SAAS,EAAC,cAAc;oBAAAE,QAAA,EAC3B,IAAIyB,IAAI,CAAC9F,OAAO,CAAC+F,UAAU,CAAC,CAACC,kBAAkB,CAAC,OAAO,EAAE;sBACxDC,IAAI,EAAE,SAAS;sBACfC,MAAM,EAAE;oBACV,CAAC;kBAAC;oBAAA3B,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACE,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACJ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC;YAAA,GAnCE1E,OAAO,CAACgB,EAAE;cAAAuD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAoCf,CAAC;UAEV,CAAC,CAAC,EAGDjG,QAAQ,IAAIE,UAAU,iBACrBnB,OAAA;YAAK2G,SAAS,EAAC,kBAAkB;YAAAE,QAAA,gBAC/B7G,OAAA;cAAK2G,SAAS,EAAC,aAAa;cAAAE,QAAA,gBAC1B7G,OAAA;gBAAA+G,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAAC,eACblH,OAAA;gBAAA+G,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAAC,eACblH,OAAA;gBAAA+G,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAY,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACV,CAAC,eACNlH,OAAA;cAAM2G,SAAS,EAAC,aAAa;cAAAE,QAAA,GAAE1F,UAAU,EAAC,sDAAY;YAAA;cAAA4F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1D,CACN,eAGDlH,OAAA;YAAK2I,GAAG,EAAE/G;UAAe;YAAAmF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzB;MACN;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAGNlH,OAAA;QAAK2G,SAAS,EAAC,kBAAkB;QAAAE,QAAA,eAC/B7G,OAAA;UAAK2G,SAAS,EAAC,uBAAuB;UAAAE,QAAA,gBACpC7G,OAAA;YACE4I,IAAI,EAAC,MAAM;YACXjC,SAAS,EAAC,eAAe;YACzBkC,WAAW,EAAC,iFAAgB;YAC5BvC,KAAK,EAAE3F,UAAW;YAClBmI,QAAQ,EAAE1C,iBAAkB;YAC5B2C,UAAU,EAAGpD,CAAC,IAAKA,CAAC,CAACqD,GAAG,KAAK,OAAO,IAAItD,iBAAiB,CAACC,CAAC;UAAE;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9D,CAAC,eACFlH,OAAA;YACE2G,SAAS,EAAC,aAAa;YACvBC,OAAO,EAAElB,iBAAkB;YAC3BuD,QAAQ,EAAE,CAACtI,UAAU,CAACkF,IAAI,CAAC,CAAC,IAAI9E,OAAQ;YAAA8F,QAAA,gBAExC7G,OAAA,CAACR,eAAe;cAAC2H,IAAI,EAAE1H;YAAa;cAAAsH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eACvClH,OAAA;cAAA6G,QAAA,EAAM;YAAS;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3G,EAAA,CAvYIN,SAAS;EAAA,QACIV,WAAW;AAAA;AAAA2J,EAAA,GADxBjJ,SAAS;AAyYf,eAAeA,SAAS;AAAC,IAAAiJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}