{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000/api';\nclass ApiClient {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n    this.token = localStorage.getItem('accessToken');\n  }\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('accessToken', token);\n  }\n  getHeaders(includeContentType = true) {\n    const headers = {};\n    if (includeContentType) {\n      headers['Content-Type'] = 'application/json';\n    }\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    return headers;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n\n    // Определяем, нужно ли включать Content-Type\n    const isFormData = options.body instanceof FormData;\n    const config = {\n      headers: this.getHeaders(!isFormData),\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      console.log('Raw response status:', response.status);\n      console.log('Raw response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('API Error:', {\n          status: response.status,\n          statusText: response.statusText,\n          url: url,\n          errorData: errorData\n        });\n        throw new Error(errorData.detail || errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      const responseData = await response.json();\n      console.log('Response data:', responseData);\n      return responseData;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Аутентификация\n  async register(userData) {\n    const formData = new FormData();\n    formData.append('email', userData.email);\n    formData.append('password', userData.password);\n    formData.append('confirm_password', userData.confirmPassword);\n    formData.append('first_name', userData.firstName);\n    formData.append('last_name', userData.lastName);\n    formData.append('username', (userData.firstName + userData.lastName).toLowerCase());\n    formData.append('status', ''); // Пустой статус для простой регистрации\n    formData.append('city', ''); // Пустой город для простой регистрации\n    formData.append('birth_date', ''); // Пустая дата рождения для простой регистрации\n\n    return this.request('/auth/register/', {\n      method: 'POST',\n      body: formData\n    });\n  }\n  async login(email, password) {\n    const formData = new FormData();\n    formData.append('email', email);\n    formData.append('password', password);\n    return this.request('/auth/login/', {\n      method: 'POST',\n      body: formData\n    });\n  }\n  async getCurrentUser() {\n    return this.request('/users/me');\n  }\n\n  // Пользователи\n  async getUsers() {\n    return this.request('/users');\n  }\n\n  // Чаты\n  async getChats() {\n    return this.request('/chats');\n  }\n  async createChat(user2Id) {\n    return this.request('/chats', {\n      method: 'POST',\n      body: JSON.stringify({\n        user2_id: user2Id\n      })\n    });\n  }\n\n  // Сообщения\n  async getMessages(chatId) {\n    return this.request(`/chats/${chatId}/messages`);\n  }\n  async sendMessage(chatId, text) {\n    return this.request(`/chats/${chatId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify({\n        text\n      })\n    });\n  }\n  async updateMessage(messageId, text) {\n    return this.request(`/messages/${messageId}`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        text\n      })\n    });\n  }\n  async deleteMessage(messageId) {\n    return this.request(`/messages/${messageId}`, {\n      method: 'DELETE'\n    });\n  }\n  async uploadFile(messageId, file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.request(`/messages/${messageId}/files`, {\n      method: 'POST',\n      body: formData\n    });\n  }\n\n  // Методы для постов (совместимость со старым API)\n  async createPost(postData) {\n    const formData = new FormData();\n\n    // Добавляем все поля в FormData\n    Object.keys(postData).forEach(key => {\n      if (postData[key] !== null && postData[key] !== undefined) {\n        formData.append(key, postData[key]);\n      }\n    });\n    return this.request('/posts/create/', {\n      method: 'POST',\n      body: formData\n    });\n  }\n  async updatePost(postId, postData) {\n    const formData = new FormData();\n    Object.keys(postData).forEach(key => {\n      if (postData[key] !== null && postData[key] !== undefined) {\n        formData.append(key, postData[key]);\n      }\n    });\n    return this.request(`/posts/${postId}/update/`, {\n      method: 'PUT',\n      body: formData\n    });\n  }\n  async getPosts() {\n    return this.request('/posts/');\n  }\n  async getPost(postId) {\n    return this.request(`/posts/${postId}/`);\n  }\n  async deletePost(postId) {\n    return this.request(`/posts/${postId}/delete/`, {\n      method: 'DELETE'\n    });\n  }\n  async getCategories() {\n    return this.request('/categories/');\n  }\n}\nexport const apiClient = new ApiClient();","map":{"version":3,"names":["API_BASE_URL","ApiClient","constructor","baseURL","token","localStorage","getItem","setToken","setItem","getHeaders","includeContentType","headers","request","endpoint","options","url","isFormData","body","FormData","config","response","fetch","console","log","status","Object","fromEntries","entries","ok","errorData","json","catch","error","statusText","Error","detail","message","responseData","register","userData","formData","append","email","password","confirmPassword","firstName","lastName","toLowerCase","method","login","getCurrentUser","getUsers","getChats","createChat","user2Id","JSON","stringify","user2_id","getMessages","chatId","sendMessage","text","updateMessage","messageId","deleteMessage","uploadFile","file","createPost","postData","keys","forEach","key","undefined","updatePost","postId","getPosts","getPost","deletePost","getCategories","apiClient"],"sources":["C:/Users/Wlad/OneDrive/Desktop/kwork_site/src/utils/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000/api';\n\nclass ApiClient {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n    this.token = localStorage.getItem('accessToken');\n  }\n\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('accessToken', token);\n  }\n\n  getHeaders(includeContentType = true) {\n    const headers = {};\n    \n    if (includeContentType) {\n      headers['Content-Type'] = 'application/json';\n    }\n    \n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    \n    return headers;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    // Определяем, нужно ли включать Content-Type\n    const isFormData = options.body instanceof FormData;\n    const config = {\n      headers: this.getHeaders(!isFormData),\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      console.log('Raw response status:', response.status);\n      console.log('Raw response headers:', Object.fromEntries(response.headers.entries()));\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('API Error:', {\n          status: response.status,\n          statusText: response.statusText,\n          url: url,\n          errorData: errorData\n        });\n        throw new Error(errorData.detail || errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      \n      const responseData = await response.json();\n      console.log('Response data:', responseData);\n      return responseData;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Аутентификация\n  async register(userData) {\n    const formData = new FormData();\n    formData.append('email', userData.email);\n    formData.append('password', userData.password);\n    formData.append('confirm_password', userData.confirmPassword);\n    formData.append('first_name', userData.firstName);\n    formData.append('last_name', userData.lastName);\n    formData.append('username', (userData.firstName + userData.lastName).toLowerCase());\n    formData.append('status', ''); // Пустой статус для простой регистрации\n    formData.append('city', ''); // Пустой город для простой регистрации\n    formData.append('birth_date', ''); // Пустая дата рождения для простой регистрации\n    \n    return this.request('/auth/register/', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  async login(email, password) {\n    const formData = new FormData();\n    formData.append('email', email);\n    formData.append('password', password);\n    \n    return this.request('/auth/login/', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  async getCurrentUser() {\n    return this.request('/users/me');\n  }\n\n  // Пользователи\n  async getUsers() {\n    return this.request('/users');\n  }\n\n  // Чаты\n  async getChats() {\n    return this.request('/chats');\n  }\n\n  async createChat(user2Id) {\n    return this.request('/chats', {\n      method: 'POST',\n      body: JSON.stringify({ user2_id: user2Id }),\n    });\n  }\n\n  // Сообщения\n  async getMessages(chatId) {\n    return this.request(`/chats/${chatId}/messages`);\n  }\n\n  async sendMessage(chatId, text) {\n    return this.request(`/chats/${chatId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify({ text }),\n    });\n  }\n\n  async updateMessage(messageId, text) {\n    return this.request(`/messages/${messageId}`, {\n      method: 'PUT',\n      body: JSON.stringify({ text }),\n    });\n  }\n\n  async deleteMessage(messageId) {\n    return this.request(`/messages/${messageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async uploadFile(messageId, file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    return this.request(`/messages/${messageId}/files`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  // Методы для постов (совместимость со старым API)\n  async createPost(postData) {\n    const formData = new FormData();\n    \n    // Добавляем все поля в FormData\n    Object.keys(postData).forEach(key => {\n      if (postData[key] !== null && postData[key] !== undefined) {\n        formData.append(key, postData[key]);\n      }\n    });\n    \n    return this.request('/posts/create/', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  async updatePost(postId, postData) {\n    const formData = new FormData();\n    \n    Object.keys(postData).forEach(key => {\n      if (postData[key] !== null && postData[key] !== undefined) {\n        formData.append(key, postData[key]);\n      }\n    });\n    \n    return this.request(`/posts/${postId}/update/`, {\n      method: 'PUT',\n      body: formData,\n    });\n  }\n\n  async getPosts() {\n    return this.request('/posts/');\n  }\n\n  async getPost(postId) {\n    return this.request(`/posts/${postId}/`);\n  }\n\n  async deletePost(postId) {\n    return this.request(`/posts/${postId}/delete/`, {\n      method: 'DELETE',\n    });\n  }\n\n  async getCategories() {\n    return this.request('/categories/');\n  }\n}\n\nexport const apiClient = new ApiClient();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}