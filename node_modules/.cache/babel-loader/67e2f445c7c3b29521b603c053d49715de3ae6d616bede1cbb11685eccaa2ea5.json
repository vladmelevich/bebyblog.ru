{"ast":null,"code":"class WebSocketClient {\n  constructor() {\n    this.ws = null;\n    this.userId = null;\n    this.currentChatId = null;\n    this.messageHandlers = new Map();\n    this.typingTimeout = null;\n  }\n  connect(userId) {\n    this.userId = userId;\n    this.ws = new WebSocket(`ws://localhost:8000/ws/${userId}`);\n    this.ws.onopen = () => {\n      console.log('WebSocket connected');\n    };\n    this.ws.onmessage = event => {\n      const data = JSON.parse(event.data);\n      this.handleMessage(data);\n    };\n    this.ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      // Переподключение через 3 секунды\n      setTimeout(() => {\n        if (this.userId) {\n          this.connect(this.userId);\n        }\n      }, 3000);\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.userId = null;\n    this.currentChatId = null;\n  }\n  joinChat(chatId) {\n    this.currentChatId = chatId;\n    this.send({\n      type: 'join_chat',\n      chat_id: chatId\n    });\n  }\n  leaveChat(chatId) {\n    this.send({\n      type: 'leave_chat',\n      chat_id: chatId\n    });\n    if (this.currentChatId === chatId) {\n      this.currentChatId = null;\n    }\n  }\n  sendTyping(isTyping) {\n    if (this.currentChatId) {\n      this.send({\n        type: 'typing',\n        chat_id: this.currentChatId,\n        is_typing: isTyping\n      });\n    }\n  }\n  send(data) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(data));\n    }\n  }\n  handleMessage(data) {\n    const handlers = this.messageHandlers.get(data.type) || [];\n    handlers.forEach(handler => handler(data));\n  }\n  onMessage(type, handler) {\n    if (!this.messageHandlers.has(type)) {\n      this.messageHandlers.set(type, []);\n    }\n    this.messageHandlers.get(type).push(handler);\n  }\n  offMessage(type, handler) {\n    if (this.messageHandlers.has(type)) {\n      const handlers = this.messageHandlers.get(type);\n      const index = handlers.indexOf(handler);\n      if (index > -1) {\n        handlers.splice(index, 1);\n      }\n    }\n  }\n\n  // Утилиты для индикатора набора текста\n  startTyping() {\n    this.sendTyping(true);\n\n    // Останавливаем набор через 2 секунды\n    if (this.typingTimeout) {\n      clearTimeout(this.typingTimeout);\n    }\n    this.typingTimeout = setTimeout(() => {\n      this.stopTyping();\n    }, 2000);\n  }\n  stopTyping() {\n    this.sendTyping(false);\n    if (this.typingTimeout) {\n      clearTimeout(this.typingTimeout);\n      this.typingTimeout = null;\n    }\n  }\n}\nexport const wsClient = new WebSocketClient();","map":{"version":3,"names":["WebSocketClient","constructor","ws","userId","currentChatId","messageHandlers","Map","typingTimeout","connect","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","handleMessage","onclose","setTimeout","onerror","error","disconnect","close","joinChat","chatId","send","type","chat_id","leaveChat","sendTyping","isTyping","is_typing","readyState","OPEN","stringify","handlers","get","forEach","handler","onMessage","has","set","push","offMessage","index","indexOf","splice","startTyping","clearTimeout","stopTyping","wsClient"],"sources":["C:/Users/Wlad/OneDrive/Desktop/kwork_site/src/utils/websocket.js"],"sourcesContent":["class WebSocketClient {\r\n  constructor() {\r\n    this.ws = null;\r\n    this.userId = null;\r\n    this.currentChatId = null;\r\n    this.messageHandlers = new Map();\r\n    this.typingTimeout = null;\r\n  }\r\n\r\n  connect(userId) {\r\n    this.userId = userId;\r\n    this.ws = new WebSocket(`ws://localhost:8000/ws/${userId}`);\r\n    \r\n    this.ws.onopen = () => {\r\n      console.log('WebSocket connected');\r\n    };\r\n    \r\n    this.ws.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      this.handleMessage(data);\r\n    };\r\n    \r\n    this.ws.onclose = () => {\r\n      console.log('WebSocket disconnected');\r\n      // Переподключение через 3 секунды\r\n      setTimeout(() => {\r\n        if (this.userId) {\r\n          this.connect(this.userId);\r\n        }\r\n      }, 3000);\r\n    };\r\n    \r\n    this.ws.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n    }\r\n    this.userId = null;\r\n    this.currentChatId = null;\r\n  }\r\n\r\n  joinChat(chatId) {\r\n    this.currentChatId = chatId;\r\n    this.send({\r\n      type: 'join_chat',\r\n      chat_id: chatId\r\n    });\r\n  }\r\n\r\n  leaveChat(chatId) {\r\n    this.send({\r\n      type: 'leave_chat',\r\n      chat_id: chatId\r\n    });\r\n    if (this.currentChatId === chatId) {\r\n      this.currentChatId = null;\r\n    }\r\n  }\r\n\r\n  sendTyping(isTyping) {\r\n    if (this.currentChatId) {\r\n      this.send({\r\n        type: 'typing',\r\n        chat_id: this.currentChatId,\r\n        is_typing: isTyping\r\n      });\r\n    }\r\n  }\r\n\r\n  send(data) {\r\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n      this.ws.send(JSON.stringify(data));\r\n    }\r\n  }\r\n\r\n  handleMessage(data) {\r\n    const handlers = this.messageHandlers.get(data.type) || [];\r\n    handlers.forEach(handler => handler(data));\r\n  }\r\n\r\n  onMessage(type, handler) {\r\n    if (!this.messageHandlers.has(type)) {\r\n      this.messageHandlers.set(type, []);\r\n    }\r\n    this.messageHandlers.get(type).push(handler);\r\n  }\r\n\r\n  offMessage(type, handler) {\r\n    if (this.messageHandlers.has(type)) {\r\n      const handlers = this.messageHandlers.get(type);\r\n      const index = handlers.indexOf(handler);\r\n      if (index > -1) {\r\n        handlers.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Утилиты для индикатора набора текста\r\n  startTyping() {\r\n    this.sendTyping(true);\r\n    \r\n    // Останавливаем набор через 2 секунды\r\n    if (this.typingTimeout) {\r\n      clearTimeout(this.typingTimeout);\r\n    }\r\n    \r\n    this.typingTimeout = setTimeout(() => {\r\n      this.stopTyping();\r\n    }, 2000);\r\n  }\r\n\r\n  stopTyping() {\r\n    this.sendTyping(false);\r\n    if (this.typingTimeout) {\r\n      clearTimeout(this.typingTimeout);\r\n      this.typingTimeout = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport const wsClient = new WebSocketClient();\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}