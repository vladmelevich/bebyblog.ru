{"ast":null,"code":"// Утилита для работы с пользователями\n\n// Получить информацию о пользователе по ID\nexport const getUserInfo = async userId => {\n  try {\n    // Делаем API-запрос для получения реальных данных\n    // Используем тот же endpoint, что и в UserProfilePage\n    const response = await fetch(`http://localhost:8000/api/users/profile-with-posts/${userId}/`, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      if (data.success && data.user) {\n        const user = data.user;\n        const userInfo = {\n          id: userId,\n          name: user.first_name || user.username || `Пользователь ${userId}`,\n          avatar: user.avatar || null,\n          city: user.city || 'Не указан'\n        };\n        return userInfo;\n      } else if (data.user) {\n        // Если нет поля success, но есть user\n        const user = data.user;\n        const userInfo = {\n          id: userId,\n          name: user.first_name || user.username || `Пользователь ${userId}`,\n          avatar: user.avatar || null,\n          city: user.city || 'Не указан'\n        };\n        return userInfo;\n      }\n    }\n\n    // Если API не сработал, возвращаем базовую информацию\n    const basicUserInfo = {\n      id: userId,\n      name: `Пользователь ${userId}`,\n      avatar: null,\n      city: 'Не указан'\n    };\n    return basicUserInfo;\n  } catch (error) {\n    console.error('Ошибка при получении информации о пользователе:', error);\n    const basicUserInfo = {\n      id: userId,\n      name: `Пользователь ${userId}`,\n      avatar: null,\n      city: 'Не указан'\n    };\n    return basicUserInfo;\n  }\n};\n\n// Получить инициалы пользователя\nexport const getUserInitials = userName => {\n  var _names$, _names$2;\n  if (!userName) return 'А';\n  const names = userName.split(' ');\n  return `${((_names$ = names[0]) === null || _names$ === void 0 ? void 0 : _names$.charAt(0)) || 'А'}${((_names$2 = names[1]) === null || _names$2 === void 0 ? void 0 : _names$2.charAt(0)) || ''}`.toUpperCase();\n};\n\n// Форматировать дату\nexport const formatDate = dateString => {\n  if (!dateString) return 'Недавно';\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInHours = Math.floor((now - date) / (1000 * 60 * 60));\n  if (diffInHours < 1) return 'Только что';\n  if (diffInHours < 24) return `${diffInHours} ч назад`;\n  const diffInDays = Math.floor(diffInHours / 24);\n  if (diffInDays < 7) return `${diffInDays} дн назад`;\n  return date.toLocaleDateString('ru-RU');\n};","map":{"version":3,"names":["getUserInfo","userId","response","fetch","headers","ok","data","json","success","user","userInfo","id","name","first_name","username","avatar","city","basicUserInfo","error","console","getUserInitials","userName","_names$","_names$2","names","split","charAt","toUpperCase","formatDate","dateString","date","Date","now","diffInHours","Math","floor","diffInDays","toLocaleDateString"],"sources":["C:/Users/Wlad/OneDrive/Desktop/kwork_site/src/utils/userUtils.js"],"sourcesContent":["// Утилита для работы с пользователями\r\n\r\n// Получить информацию о пользователе по ID\r\nexport const getUserInfo = async (userId) => {\r\n  try {\r\n    // Делаем API-запрос для получения реальных данных\r\n    // Используем тот же endpoint, что и в UserProfilePage\r\n    const response = await fetch(`http://localhost:8000/api/users/profile-with-posts/${userId}/`, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      \r\n      if (data.success && data.user) {\r\n        const user = data.user;\r\n        const userInfo = {\r\n          id: userId,\r\n          name: user.first_name || user.username || `Пользователь ${userId}`,\r\n          avatar: user.avatar || null,\r\n          city: user.city || 'Не указан'\r\n        };\r\n        \r\n        return userInfo;\r\n      } else if (data.user) {\r\n        // Если нет поля success, но есть user\r\n        const user = data.user;\r\n        const userInfo = {\r\n          id: userId,\r\n          name: user.first_name || user.username || `Пользователь ${userId}`,\r\n          avatar: user.avatar || null,\r\n          city: user.city || 'Не указан'\r\n        };\r\n        \r\n        return userInfo;\r\n      }\r\n    }\r\n    \r\n    // Если API не сработал, возвращаем базовую информацию\r\n    const basicUserInfo = {\r\n      id: userId,\r\n      name: `Пользователь ${userId}`,\r\n      avatar: null,\r\n      city: 'Не указан'\r\n    };\r\n    \r\n    return basicUserInfo;\r\n  } catch (error) {\r\n    console.error('Ошибка при получении информации о пользователе:', error);\r\n    const basicUserInfo = {\r\n      id: userId,\r\n      name: `Пользователь ${userId}`,\r\n      avatar: null,\r\n      city: 'Не указан'\r\n    };\r\n    return basicUserInfo;\r\n  }\r\n};\r\n\r\n// Получить инициалы пользователя\r\nexport const getUserInitials = (userName) => {\r\n  if (!userName) return 'А';\r\n  const names = userName.split(' ');\r\n  return `${names[0]?.charAt(0) || 'А'}${names[1]?.charAt(0) || ''}`.toUpperCase();\r\n};\r\n\r\n// Форматировать дату\r\nexport const formatDate = (dateString) => {\r\n  if (!dateString) return 'Недавно';\r\n  const date = new Date(dateString);\r\n  const now = new Date();\r\n  const diffInHours = Math.floor((now - date) / (1000 * 60 * 60));\r\n  \r\n  if (diffInHours < 1) return 'Только что';\r\n  if (diffInHours < 24) return `${diffInHours} ч назад`;\r\n  \r\n  const diffInDays = Math.floor(diffInHours / 24);\r\n  if (diffInDays < 7) return `${diffInDays} дн назад`;\r\n  \r\n  return date.toLocaleDateString('ru-RU');\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}