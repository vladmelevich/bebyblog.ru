{"ast":null,"code":"// Утилиты для работы с авторизацией\n\n// Получить токен из хранилища\nexport const getToken = () => {\n  return localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\n};\n\n// Получить refresh токен из хранилища\nexport const getRefreshToken = () => {\n  return localStorage.getItem('refreshToken') || sessionStorage.getItem('refreshToken');\n};\n\n// Сохранить токены\nexport const saveTokens = (accessToken, refreshToken, rememberMe = false) => {\n  if (rememberMe) {\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  } else {\n    sessionStorage.setItem('accessToken', accessToken);\n    sessionStorage.setItem('refreshToken', refreshToken);\n  }\n};\n\n// Удалить токены\nexport const removeTokens = () => {\n  localStorage.removeItem('accessToken');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('userData');\n  sessionStorage.removeItem('accessToken');\n  sessionStorage.removeItem('refreshToken');\n  sessionStorage.removeItem('userData');\n};\n\n// Получить ID пользователя из токена\nexport const getUserIdFromToken = () => {\n  const token = getToken();\n  if (!token) return null;\n  try {\n    // Декодируем JWT токен (payload находится во второй части)\n    const payload = token.split('.')[1];\n    const decodedPayload = JSON.parse(atob(payload));\n    return decodedPayload.user_id;\n  } catch (error) {\n    console.error('Ошибка декодирования токена:', error);\n    return null;\n  }\n};\n\n// Проверить валидность токена\nexport const checkTokenValidity = async () => {\n  const token = getToken();\n  if (!token) {\n    return false;\n  }\n  try {\n    const response = await fetch('http://localhost:8000/api/auth/me/', {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      return true;\n    } else if (response.status === 401) {\n      // Токен истек, пробуем обновить\n      try {\n        await refreshAccessToken();\n        return true;\n      } catch (error) {\n        removeTokens();\n        return false;\n      }\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.error('Ошибка проверки токена:', error);\n    return false;\n  }\n};\n\n// Обновить токен\nexport const refreshAccessToken = async () => {\n  const refreshToken = getRefreshToken();\n  if (!refreshToken) {\n    throw new Error('Нет refresh токена');\n  }\n  try {\n    const response = await fetch('http://localhost:8000/api/auth/token/refresh/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        refresh: refreshToken\n      })\n    });\n    if (response.ok) {\n      const data = await response.json();\n\n      // Сохраняем новый токен в том же хранилище, где был старый\n      const storage = localStorage.getItem('accessToken') ? localStorage : sessionStorage;\n      storage.setItem('accessToken', data.access);\n      return data.access;\n    } else {\n      throw new Error('Не удалось обновить токен');\n    }\n  } catch (error) {\n    console.error('Ошибка обновления токена:', error);\n    removeTokens();\n    throw error;\n  }\n};\n\n// Проверить, авторизован ли пользователь\nexport const isAuthenticated = () => {\n  return !!getToken();\n};\n\n// Получить данные пользователя\nexport const getUserData = () => {\n  const userData = localStorage.getItem('userData') || sessionStorage.getItem('userData');\n  return userData ? JSON.parse(userData) : null;\n};\n\n// Автоматическая проверка токена при загрузке\nexport const checkAuthOnLoad = async () => {\n  const token = getToken();\n  if (!token) {\n    return false;\n  }\n  try {\n    const response = await fetch('http://localhost:8000/api/auth/me/', {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      return true;\n    } else if (response.status === 401) {\n      // Токен истек, пробуем обновить\n      try {\n        await refreshAccessToken();\n        return true;\n      } catch (error) {\n        removeTokens();\n        return false;\n      }\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.error('Ошибка проверки авторизации:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["getToken","localStorage","getItem","sessionStorage","getRefreshToken","saveTokens","accessToken","refreshToken","rememberMe","setItem","removeTokens","removeItem","getUserIdFromToken","token","payload","split","decodedPayload","JSON","parse","atob","user_id","error","console","checkTokenValidity","response","fetch","headers","ok","status","refreshAccessToken","Error","method","body","stringify","refresh","data","json","storage","access","isAuthenticated","getUserData","userData","checkAuthOnLoad"],"sources":["C:/Users/Wlad/OneDrive/Desktop/kwork_site/src/utils/auth.js"],"sourcesContent":["// Утилиты для работы с авторизацией\n\n// Получить токен из хранилища\nexport const getToken = () => {\n  return localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\n};\n\n// Получить refresh токен из хранилища\nexport const getRefreshToken = () => {\n  return localStorage.getItem('refreshToken') || sessionStorage.getItem('refreshToken');\n};\n\n// Сохранить токены\nexport const saveTokens = (accessToken, refreshToken, rememberMe = false) => {\n  if (rememberMe) {\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  } else {\n    sessionStorage.setItem('accessToken', accessToken);\n    sessionStorage.setItem('refreshToken', refreshToken);\n  }\n};\n\n// Удалить токены\nexport const removeTokens = () => {\n  localStorage.removeItem('accessToken');\n  localStorage.removeItem('refreshToken');\n  localStorage.removeItem('userData');\n  sessionStorage.removeItem('accessToken');\n  sessionStorage.removeItem('refreshToken');\n  sessionStorage.removeItem('userData');\n};\n\n// Получить ID пользователя из токена\nexport const getUserIdFromToken = () => {\n  const token = getToken();\n  if (!token) return null;\n  \n  try {\n    // Декодируем JWT токен (payload находится во второй части)\n    const payload = token.split('.')[1];\n    const decodedPayload = JSON.parse(atob(payload));\n    return decodedPayload.user_id;\n  } catch (error) {\n    console.error('Ошибка декодирования токена:', error);\n    return null;\n  }\n};\n\n// Проверить валидность токена\nexport const checkTokenValidity = async () => {\n  const token = getToken();\n  \n  if (!token) {\n    return false;\n  }\n\n  try {\n    const response = await fetch('http://localhost:8000/api/auth/me/', {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      }\n    });\n\n    if (response.ok) {\n      return true;\n    } else if (response.status === 401) {\n      // Токен истек, пробуем обновить\n      try {\n        await refreshAccessToken();\n        return true;\n      } catch (error) {\n        removeTokens();\n        return false;\n      }\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.error('Ошибка проверки токена:', error);\n    return false;\n  }\n};\n\n// Обновить токен\nexport const refreshAccessToken = async () => {\n  const refreshToken = getRefreshToken();\n  \n  if (!refreshToken) {\n    throw new Error('Нет refresh токена');\n  }\n\n  try {\n    const response = await fetch('http://localhost:8000/api/auth/token/refresh/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        refresh: refreshToken\n      })\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      \n      // Сохраняем новый токен в том же хранилище, где был старый\n      const storage = localStorage.getItem('accessToken') ? localStorage : sessionStorage;\n      storage.setItem('accessToken', data.access);\n      \n      return data.access;\n    } else {\n      throw new Error('Не удалось обновить токен');\n    }\n  } catch (error) {\n    console.error('Ошибка обновления токена:', error);\n    removeTokens();\n    throw error;\n  }\n};\n\n// Проверить, авторизован ли пользователь\nexport const isAuthenticated = () => {\n  return !!getToken();\n};\n\n// Получить данные пользователя\nexport const getUserData = () => {\n  const userData = localStorage.getItem('userData') || sessionStorage.getItem('userData');\n  return userData ? JSON.parse(userData) : null;\n};\n\n// Автоматическая проверка токена при загрузке\nexport const checkAuthOnLoad = async () => {\n  const token = getToken();\n  \n  if (!token) {\n    return false;\n  }\n\n  try {\n    const response = await fetch('http://localhost:8000/api/auth/me/', {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      }\n    });\n\n    if (response.ok) {\n      return true;\n    } else if (response.status === 401) {\n      // Токен истек, пробуем обновить\n      try {\n        await refreshAccessToken();\n        return true;\n      } catch (error) {\n        removeTokens();\n        return false;\n      }\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.error('Ошибка проверки авторизации:', error);\n    return false;\n  }\n};\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,QAAQ,GAAGA,CAAA,KAAM;EAC5B,OAAOC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,aAAa,CAAC;AACrF,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAOH,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,cAAc,CAAC;AACvF,CAAC;;AAED;AACA,OAAO,MAAMG,UAAU,GAAGA,CAACC,WAAW,EAAEC,YAAY,EAAEC,UAAU,GAAG,KAAK,KAAK;EAC3E,IAAIA,UAAU,EAAE;IACdP,YAAY,CAACQ,OAAO,CAAC,aAAa,EAAEH,WAAW,CAAC;IAChDL,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEF,YAAY,CAAC;EACpD,CAAC,MAAM;IACLJ,cAAc,CAACM,OAAO,CAAC,aAAa,EAAEH,WAAW,CAAC;IAClDH,cAAc,CAACM,OAAO,CAAC,cAAc,EAAEF,YAAY,CAAC;EACtD;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,YAAY,GAAGA,CAAA,KAAM;EAChCT,YAAY,CAACU,UAAU,CAAC,aAAa,CAAC;EACtCV,YAAY,CAACU,UAAU,CAAC,cAAc,CAAC;EACvCV,YAAY,CAACU,UAAU,CAAC,UAAU,CAAC;EACnCR,cAAc,CAACQ,UAAU,CAAC,aAAa,CAAC;EACxCR,cAAc,CAACQ,UAAU,CAAC,cAAc,CAAC;EACzCR,cAAc,CAACQ,UAAU,CAAC,UAAU,CAAC;AACvC,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EACtC,MAAMC,KAAK,GAAGb,QAAQ,CAAC,CAAC;EACxB,IAAI,CAACa,KAAK,EAAE,OAAO,IAAI;EAEvB,IAAI;IACF;IACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnC,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,OAAO,CAAC,CAAC;IAChD,OAAOE,cAAc,CAACI,OAAO;EAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,MAAMV,KAAK,GAAGb,QAAQ,CAAC,CAAC;EAExB,IAAI,CAACa,KAAK,EAAE;IACV,OAAO,KAAK;EACd;EAEA,IAAI;IACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MACjEC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUb,KAAK,EAAE;QAClC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAIW,QAAQ,CAACG,EAAE,EAAE;MACf,OAAO,IAAI;IACb,CAAC,MAAM,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MAClC;MACA,IAAI;QACF,MAAMC,kBAAkB,CAAC,CAAC;QAC1B,OAAO,IAAI;MACb,CAAC,CAAC,OAAOR,KAAK,EAAE;QACdX,YAAY,CAAC,CAAC;QACd,OAAO,KAAK;MACd;IACF,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,MAAMtB,YAAY,GAAGH,eAAe,CAAC,CAAC;EAEtC,IAAI,CAACG,YAAY,EAAE;IACjB,MAAM,IAAIuB,KAAK,CAAC,oBAAoB,CAAC;EACvC;EAEA,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;MAC5EM,MAAM,EAAE,MAAM;MACdL,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDM,IAAI,EAAEf,IAAI,CAACgB,SAAS,CAAC;QACnBC,OAAO,EAAE3B;MACX,CAAC;IACH,CAAC,CAAC;IAEF,IAAIiB,QAAQ,CAACG,EAAE,EAAE;MACf,MAAMQ,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;;MAElC;MACA,MAAMC,OAAO,GAAGpC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,GAAGD,YAAY,GAAGE,cAAc;MACnFkC,OAAO,CAAC5B,OAAO,CAAC,aAAa,EAAE0B,IAAI,CAACG,MAAM,CAAC;MAE3C,OAAOH,IAAI,CAACG,MAAM;IACpB,CAAC,MAAM;MACL,MAAM,IAAIR,KAAK,CAAC,2BAA2B,CAAC;IAC9C;EACF,CAAC,CAAC,OAAOT,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjDX,YAAY,CAAC,CAAC;IACd,MAAMW,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMkB,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAO,CAAC,CAACvC,QAAQ,CAAC,CAAC;AACrB,CAAC;;AAED;AACA,OAAO,MAAMwC,WAAW,GAAGA,CAAA,KAAM;EAC/B,MAAMC,QAAQ,GAAGxC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAIC,cAAc,CAACD,OAAO,CAAC,UAAU,CAAC;EACvF,OAAOuC,QAAQ,GAAGxB,IAAI,CAACC,KAAK,CAACuB,QAAQ,CAAC,GAAG,IAAI;AAC/C,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,MAAM7B,KAAK,GAAGb,QAAQ,CAAC,CAAC;EAExB,IAAI,CAACa,KAAK,EAAE;IACV,OAAO,KAAK;EACd;EAEA,IAAI;IACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MACjEC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUb,KAAK,EAAE;QAClC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAIW,QAAQ,CAACG,EAAE,EAAE;MACf,OAAO,IAAI;IACb,CAAC,MAAM,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;MAClC;MACA,IAAI;QACF,MAAMC,kBAAkB,CAAC,CAAC;QAC1B,OAAO,IAAI;MACb,CAAC,CAAC,OAAOR,KAAK,EAAE;QACdX,YAAY,CAAC,CAAC;QACd,OAAO,KAAK;MACd;IACF,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}