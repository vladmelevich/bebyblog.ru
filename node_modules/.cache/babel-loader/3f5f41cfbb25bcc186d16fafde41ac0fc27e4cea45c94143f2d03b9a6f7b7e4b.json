{"ast":null,"code":"// Утилита для работы с пользователями\n\n// Тестовая функция для получения моковых данных пользователя\nexport const getMockUserInfo = userId => {\n  console.log('Используем моковые данные для пользователя:', userId);\n\n  // Проверяем, что userId существует и является числом\n  if (!userId || isNaN(Number(userId))) {\n    console.warn('Некорректный userId:', userId, 'используем значение по умолчанию');\n    userId = 1;\n  }\n\n  // Создаем более реалистичные моковые данные\n  const mockNames = ['Анна', 'Мария', 'Елена', 'Ольга', 'Татьяна', 'Наталья', 'Ирина', 'Светлана', 'Александр', 'Дмитрий', 'Сергей', 'Андрей', 'Алексей', 'Максим', 'Владимир', 'Иван'];\n  const mockCities = ['Москва', 'Санкт-Петербург', 'Новосибирск', 'Екатеринбург', 'Казань', 'Нижний Новгород', 'Челябинск', 'Самара', 'Ростов-на-Дону', 'Уфа', 'Красноярск', 'Пермь'];\n\n  // Генерируем имя на основе ID для консистентности\n  const nameIndex = Number(userId) % mockNames.length;\n  const cityIndex = Number(userId) % mockCities.length;\n  const mockUser = {\n    id: userId,\n    name: mockNames[nameIndex],\n    username: `user_${userId}`,\n    avatar: null,\n    city: mockCities[cityIndex],\n    isOnline: false\n  };\n  console.log('Создан моковый пользователь:', mockUser);\n  return mockUser;\n};\n\n// Функция для синхронизации данных между страницами\nexport const syncUserDataFromProfile = (userId, profileData) => {\n  try {\n    if (profileData && profileData.user) {\n      const userInfo = {\n        id: userId,\n        name: profileData.user.first_name || profileData.user.username || `Пользователь ${userId}`,\n        avatar: profileData.user.avatar || null,\n        city: profileData.user.city || 'Не указан'\n      };\n      console.log('Синхронизируем данные пользователя из профиля:', userInfo);\n      saveUserInfoToStorage(userInfo);\n      return userInfo;\n    }\n  } catch (error) {\n    console.error('Ошибка при синхронизации данных пользователя:', error);\n  }\n  return null;\n};\n\n// Функция для получения информации о пользователе из localStorage (если есть)\nexport const getUserInfoFromStorage = userId => {\n  try {\n    // Пытаемся найти информацию о пользователе в localStorage\n    const storedUsers = localStorage.getItem('userProfiles');\n    if (storedUsers) {\n      const users = JSON.parse(storedUsers);\n      const user = users.find(u => u.id == userId);\n      if (user) {\n        console.log('Найдена информация о пользователе в localStorage:', user);\n        return {\n          id: user.id,\n          name: user.first_name || user.username || `Пользователь ${userId}`,\n          avatar: user.avatar || null,\n          city: user.city || 'Не указан'\n        };\n      }\n    }\n  } catch (error) {\n    console.error('Ошибка при получении информации из localStorage:', error);\n  }\n  return null;\n};\n\n// Функция для сохранения информации о пользователе в localStorage\nexport const saveUserInfoToStorage = userInfo => {\n  try {\n    const storedUsers = localStorage.getItem('userProfiles') || '{}';\n    const users = JSON.parse(storedUsers);\n    users[userInfo.id] = userInfo;\n    localStorage.setItem('userProfiles', JSON.stringify(users));\n    console.log('Информация о пользователе сохранена в localStorage:', userInfo);\n  } catch (error) {\n    console.error('Ошибка при сохранении в localStorage:', error);\n  }\n};\n\n// Получить информацию о пользователе по ID\nexport const getUserInfo = async userId => {\n  try {\n    console.log('Получаем информацию о пользователе:', userId);\n\n    // Сначала проверяем localStorage\n    const storedUserInfo = getUserInfoFromStorage(userId);\n    if (storedUserInfo) {\n      console.log('Используем информацию из localStorage:', storedUserInfo);\n      return storedUserInfo;\n    }\n\n    // Для тестирования используем моковые данные\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Режим разработки, используем моковые данные');\n      const mockUserInfo = getMockUserInfo(userId);\n      // Сохраняем моковые данные в localStorage для консистентности\n      saveUserInfoToStorage(mockUserInfo);\n      return mockUserInfo;\n    }\n    const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\n    console.log('Токен найден:', !!token);\n    if (!token) {\n      console.log('Токен не найден, возвращаем базовую информацию');\n      const basicUserInfo = {\n        id: userId,\n        name: `Пользователь ${userId}`,\n        avatar: null,\n        city: 'Не указан'\n      };\n      saveUserInfoToStorage(basicUserInfo);\n      return basicUserInfo;\n    }\n    console.log('Делаем API-запрос к:', `http://localhost:8000/api/users/profile/${userId}/`);\n    const response = await fetch(`http://localhost:8000/api/users/profile/${userId}/`, {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Ответ API:', response.status, response.statusText);\n    if (response.ok) {\n      var _data$user, _data$user2, _data$user3, _data$user4;\n      const data = await response.json();\n      console.log('Данные пользователя:', data);\n      const userName = ((_data$user = data.user) === null || _data$user === void 0 ? void 0 : _data$user.first_name) || ((_data$user2 = data.user) === null || _data$user2 === void 0 ? void 0 : _data$user2.username) || `Пользователь ${userId}`;\n      const userAvatar = ((_data$user3 = data.user) === null || _data$user3 === void 0 ? void 0 : _data$user3.avatar) || null;\n      const userCity = ((_data$user4 = data.user) === null || _data$user4 === void 0 ? void 0 : _data$user4.city) || 'Не указан';\n      console.log('Имя пользователя:', userName);\n      console.log('Аватар пользователя:', userAvatar);\n      console.log('Город пользователя:', userCity);\n      const userInfo = {\n        id: userId,\n        name: userName,\n        avatar: userAvatar,\n        city: userCity\n      };\n\n      // Сохраняем полученную информацию в localStorage\n      saveUserInfoToStorage(userInfo);\n      return userInfo;\n    } else {\n      console.log('API вернул ошибку, возвращаем базовую информацию');\n      const basicUserInfo = {\n        id: userId,\n        name: `Пользователь ${userId}`,\n        avatar: null,\n        city: 'Не указан'\n      };\n      saveUserInfoToStorage(basicUserInfo);\n      return basicUserInfo;\n    }\n  } catch (error) {\n    console.error('Ошибка при получении информации о пользователе:', error);\n    console.log('Возвращаем базовую информацию из-за ошибки');\n    const basicUserInfo = {\n      id: userId,\n      name: `Пользователь ${userId}`,\n      avatar: null,\n      city: 'Не указан'\n    };\n    saveUserInfoToStorage(basicUserInfo);\n    return basicUserInfo;\n  }\n};\n\n// Получить инициалы пользователя\nexport const getUserInitials = userName => {\n  var _names$, _names$2;\n  if (!userName) return 'А';\n  const names = userName.split(' ');\n  return `${((_names$ = names[0]) === null || _names$ === void 0 ? void 0 : _names$.charAt(0)) || 'А'}${((_names$2 = names[1]) === null || _names$2 === void 0 ? void 0 : _names$2.charAt(0)) || ''}`.toUpperCase();\n};\n\n// Форматировать дату\nexport const formatDate = dateString => {\n  if (!dateString) return 'Недавно';\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffInHours = Math.floor((now - date) / (1000 * 60 * 60));\n  if (diffInHours < 1) return 'Только что';\n  if (diffInHours < 24) return `${diffInHours} ч назад`;\n  const diffInDays = Math.floor(diffInHours / 24);\n  if (diffInDays < 7) return `${diffInDays} дн назад`;\n  return date.toLocaleDateString('ru-RU');\n};","map":{"version":3,"names":["getMockUserInfo","userId","console","log","isNaN","Number","warn","mockNames","mockCities","nameIndex","length","cityIndex","mockUser","id","name","username","avatar","city","isOnline","syncUserDataFromProfile","profileData","user","userInfo","first_name","saveUserInfoToStorage","error","getUserInfoFromStorage","storedUsers","localStorage","getItem","users","JSON","parse","find","u","setItem","stringify","getUserInfo","storedUserInfo","process","env","NODE_ENV","mockUserInfo","token","sessionStorage","basicUserInfo","response","fetch","headers","status","statusText","ok","_data$user","_data$user2","_data$user3","_data$user4","data","json","userName","userAvatar","userCity","getUserInitials","_names$","_names$2","names","split","charAt","toUpperCase","formatDate","dateString","date","Date","now","diffInHours","Math","floor","diffInDays","toLocaleDateString"],"sources":["C:/Users/Wlad/OneDrive/Desktop/kwork_site/src/utils/userUtils.js"],"sourcesContent":["// Утилита для работы с пользователями\r\n\r\n// Тестовая функция для получения моковых данных пользователя\r\nexport const getMockUserInfo = (userId) => {\r\n  console.log('Используем моковые данные для пользователя:', userId);\r\n  \r\n  // Проверяем, что userId существует и является числом\r\n  if (!userId || isNaN(Number(userId))) {\r\n    console.warn('Некорректный userId:', userId, 'используем значение по умолчанию');\r\n    userId = 1;\r\n  }\r\n  \r\n  // Создаем более реалистичные моковые данные\r\n  const mockNames = [\r\n    'Анна', 'Мария', 'Елена', 'Ольга', 'Татьяна', 'Наталья', 'Ирина', 'Светлана',\r\n    'Александр', 'Дмитрий', 'Сергей', 'Андрей', 'Алексей', 'Максим', 'Владимир', 'Иван'\r\n  ];\r\n  \r\n  const mockCities = [\r\n    'Москва', 'Санкт-Петербург', 'Новосибирск', 'Екатеринбург', 'Казань', 'Нижний Новгород',\r\n    'Челябинск', 'Самара', 'Ростов-на-Дону', 'Уфа', 'Красноярск', 'Пермь'\r\n  ];\r\n  \r\n  // Генерируем имя на основе ID для консистентности\r\n  const nameIndex = Number(userId) % mockNames.length;\r\n  const cityIndex = Number(userId) % mockCities.length;\r\n  \r\n  const mockUser = {\r\n    id: userId,\r\n    name: mockNames[nameIndex],\r\n    username: `user_${userId}`,\r\n    avatar: null,\r\n    city: mockCities[cityIndex],\r\n    isOnline: false\r\n  };\r\n  \r\n  console.log('Создан моковый пользователь:', mockUser);\r\n  return mockUser;\r\n};\r\n\r\n// Функция для синхронизации данных между страницами\r\nexport const syncUserDataFromProfile = (userId, profileData) => {\r\n  try {\r\n    if (profileData && profileData.user) {\r\n      const userInfo = {\r\n        id: userId,\r\n        name: profileData.user.first_name || profileData.user.username || `Пользователь ${userId}`,\r\n        avatar: profileData.user.avatar || null,\r\n        city: profileData.user.city || 'Не указан'\r\n      };\r\n      \r\n      console.log('Синхронизируем данные пользователя из профиля:', userInfo);\r\n      saveUserInfoToStorage(userInfo);\r\n      return userInfo;\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка при синхронизации данных пользователя:', error);\r\n  }\r\n  return null;\r\n};\r\n\r\n// Функция для получения информации о пользователе из localStorage (если есть)\r\nexport const getUserInfoFromStorage = (userId) => {\r\n  try {\r\n    // Пытаемся найти информацию о пользователе в localStorage\r\n    const storedUsers = localStorage.getItem('userProfiles');\r\n    if (storedUsers) {\r\n      const users = JSON.parse(storedUsers);\r\n      const user = users.find(u => u.id == userId);\r\n      if (user) {\r\n        console.log('Найдена информация о пользователе в localStorage:', user);\r\n        return {\r\n          id: user.id,\r\n          name: user.first_name || user.username || `Пользователь ${userId}`,\r\n          avatar: user.avatar || null,\r\n          city: user.city || 'Не указан'\r\n        };\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка при получении информации из localStorage:', error);\r\n  }\r\n  return null;\r\n};\r\n\r\n// Функция для сохранения информации о пользователе в localStorage\r\nexport const saveUserInfoToStorage = (userInfo) => {\r\n  try {\r\n    const storedUsers = localStorage.getItem('userProfiles') || '{}';\r\n    const users = JSON.parse(storedUsers);\r\n    users[userInfo.id] = userInfo;\r\n    localStorage.setItem('userProfiles', JSON.stringify(users));\r\n    console.log('Информация о пользователе сохранена в localStorage:', userInfo);\r\n  } catch (error) {\r\n    console.error('Ошибка при сохранении в localStorage:', error);\r\n  }\r\n};\r\n\r\n// Получить информацию о пользователе по ID\r\nexport const getUserInfo = async (userId) => {\r\n  try {\r\n    console.log('Получаем информацию о пользователе:', userId);\r\n    \r\n    // Сначала проверяем localStorage\r\n    const storedUserInfo = getUserInfoFromStorage(userId);\r\n    if (storedUserInfo) {\r\n      console.log('Используем информацию из localStorage:', storedUserInfo);\r\n      return storedUserInfo;\r\n    }\r\n    \r\n    // Для тестирования используем моковые данные\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log('Режим разработки, используем моковые данные');\r\n      const mockUserInfo = getMockUserInfo(userId);\r\n      // Сохраняем моковые данные в localStorage для консистентности\r\n      saveUserInfoToStorage(mockUserInfo);\r\n      return mockUserInfo;\r\n    }\r\n    \r\n    const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\r\n    console.log('Токен найден:', !!token);\r\n    \r\n    if (!token) {\r\n      console.log('Токен не найден, возвращаем базовую информацию');\r\n      const basicUserInfo = {\r\n        id: userId,\r\n        name: `Пользователь ${userId}`,\r\n        avatar: null,\r\n        city: 'Не указан'\r\n      };\r\n      saveUserInfoToStorage(basicUserInfo);\r\n      return basicUserInfo;\r\n    }\r\n\r\n    console.log('Делаем API-запрос к:', `http://localhost:8000/api/users/profile/${userId}/`);\r\n    \r\n    const response = await fetch(`http://localhost:8000/api/users/profile/${userId}/`, {\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n\r\n    console.log('Ответ API:', response.status, response.statusText);\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      console.log('Данные пользователя:', data);\r\n      \r\n      const userName = data.user?.first_name || data.user?.username || `Пользователь ${userId}`;\r\n      const userAvatar = data.user?.avatar || null;\r\n      const userCity = data.user?.city || 'Не указан';\r\n      \r\n      console.log('Имя пользователя:', userName);\r\n      console.log('Аватар пользователя:', userAvatar);\r\n      console.log('Город пользователя:', userCity);\r\n      \r\n      const userInfo = {\r\n        id: userId,\r\n        name: userName,\r\n        avatar: userAvatar,\r\n        city: userCity\r\n      };\r\n      \r\n      // Сохраняем полученную информацию в localStorage\r\n      saveUserInfoToStorage(userInfo);\r\n      \r\n      return userInfo;\r\n    } else {\r\n      console.log('API вернул ошибку, возвращаем базовую информацию');\r\n      const basicUserInfo = {\r\n        id: userId,\r\n        name: `Пользователь ${userId}`,\r\n        avatar: null,\r\n        city: 'Не указан'\r\n      };\r\n      saveUserInfoToStorage(basicUserInfo);\r\n      return basicUserInfo;\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка при получении информации о пользователе:', error);\r\n    console.log('Возвращаем базовую информацию из-за ошибки');\r\n    const basicUserInfo = {\r\n      id: userId,\r\n      name: `Пользователь ${userId}`,\r\n      avatar: null,\r\n      city: 'Не указан'\r\n    };\r\n    saveUserInfoToStorage(basicUserInfo);\r\n    return basicUserInfo;\r\n  }\r\n};\r\n\r\n// Получить инициалы пользователя\r\nexport const getUserInitials = (userName) => {\r\n  if (!userName) return 'А';\r\n  const names = userName.split(' ');\r\n  return `${names[0]?.charAt(0) || 'А'}${names[1]?.charAt(0) || ''}`.toUpperCase();\r\n};\r\n\r\n// Форматировать дату\r\nexport const formatDate = (dateString) => {\r\n  if (!dateString) return 'Недавно';\r\n  const date = new Date(dateString);\r\n  const now = new Date();\r\n  const diffInHours = Math.floor((now - date) / (1000 * 60 * 60));\r\n  \r\n  if (diffInHours < 1) return 'Только что';\r\n  if (diffInHours < 24) return `${diffInHours} ч назад`;\r\n  \r\n  const diffInDays = Math.floor(diffInHours / 24);\r\n  if (diffInDays < 7) return `${diffInDays} дн назад`;\r\n  \r\n  return date.toLocaleDateString('ru-RU');\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}