{"ast":null,"code":"import { getToken, refreshAccessToken, removeTokens } from './auth.js';\n\n// Функция для выполнения запросов к API с автоматическим обновлением токена\nexport const apiRequest = async (url, options = {}) => {\n  let token = getToken();\n  if (!token) {\n    throw new Error('Токен не найден. Необходима авторизация.');\n  }\n\n  // Добавляем токен к заголовкам\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${token}`,\n    ...options.headers\n  };\n  try {\n    const response = await fetch(url, {\n      ...options,\n      headers\n    });\n\n    // Если токен истек (401), пробуем обновить\n    if (response.status === 401) {\n      try {\n        const newToken = await refreshAccessToken();\n        headers.Authorization = `Bearer ${newToken}`;\n\n        // Повторяем запрос с новым токеном\n        const retryResponse = await fetch(url, {\n          ...options,\n          headers\n        });\n        if (retryResponse.status === 401) {\n          // Если и после обновления токена получаем 401, значит токен недействителен\n          removeTokens();\n          throw new Error('Сессия истекла. Необходима повторная авторизация.');\n        }\n        return retryResponse;\n      } catch (refreshError) {\n        removeTokens();\n        throw new Error('Не удалось обновить токен. Необходима повторная авторизация.');\n      }\n    }\n    return response;\n  } catch (error) {\n    console.error('Ошибка API запроса:', error);\n    throw error;\n  }\n};\n\n// Специальная функция для загрузки файлов\nexport const apiRequestWithFile = async (url, formData, options = {}) => {\n  let token = getToken();\n  if (!token) {\n    throw new Error('Токен не найден. Необходима авторизация.');\n  }\n\n  // Для FormData не устанавливаем Content-Type, браузер сам установит\n  const headers = {\n    'Authorization': `Bearer ${token}`,\n    ...options.headers\n  };\n  try {\n    const response = await fetch(url, {\n      ...options,\n      headers,\n      body: formData\n    });\n\n    // Если токен истек (401), пробуем обновить\n    if (response.status === 401) {\n      try {\n        const newToken = await refreshAccessToken();\n        headers.Authorization = `Bearer ${newToken}`;\n\n        // Повторяем запрос с новым токеном\n        const retryResponse = await fetch(url, {\n          ...options,\n          headers,\n          body: formData\n        });\n        if (retryResponse.status === 401) {\n          removeTokens();\n          throw new Error('Сессия истекла. Необходима повторная авторизация.');\n        }\n        return retryResponse;\n      } catch (refreshError) {\n        removeTokens();\n        throw new Error('Не удалось обновить токен. Необходима повторная авторизация.');\n      }\n    }\n    return response;\n  } catch (error) {\n    console.error('Ошибка API запроса с файлом:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getToken","refreshAccessToken","removeTokens","apiRequest","url","options","token","Error","headers","response","fetch","status","newToken","Authorization","retryResponse","refreshError","error","console","apiRequestWithFile","formData","body"],"sources":["C:/Users/Wlad/OneDrive/Desktop/kwork_site/src/utils/api.js"],"sourcesContent":["import { getToken, refreshAccessToken, removeTokens } from './auth.js';\r\n\r\n// Функция для выполнения запросов к API с автоматическим обновлением токена\r\nexport const apiRequest = async (url, options = {}) => {\r\n  let token = getToken();\r\n  \r\n  if (!token) {\r\n    throw new Error('Токен не найден. Необходима авторизация.');\r\n  }\r\n\r\n  // Добавляем токен к заголовкам\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n    'Authorization': `Bearer ${token}`,\r\n    ...options.headers\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      headers\r\n    });\r\n\r\n    // Если токен истек (401), пробуем обновить\r\n    if (response.status === 401) {\r\n      try {\r\n        const newToken = await refreshAccessToken();\r\n        headers.Authorization = `Bearer ${newToken}`;\r\n        \r\n        // Повторяем запрос с новым токеном\r\n        const retryResponse = await fetch(url, {\r\n          ...options,\r\n          headers\r\n        });\r\n        \r\n        if (retryResponse.status === 401) {\r\n          // Если и после обновления токена получаем 401, значит токен недействителен\r\n          removeTokens();\r\n          throw new Error('Сессия истекла. Необходима повторная авторизация.');\r\n        }\r\n        \r\n        return retryResponse;\r\n      } catch (refreshError) {\r\n        removeTokens();\r\n        throw new Error('Не удалось обновить токен. Необходима повторная авторизация.');\r\n      }\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Ошибка API запроса:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Специальная функция для загрузки файлов\r\nexport const apiRequestWithFile = async (url, formData, options = {}) => {\r\n  let token = getToken();\r\n  \r\n  if (!token) {\r\n    throw new Error('Токен не найден. Необходима авторизация.');\r\n  }\r\n\r\n  // Для FormData не устанавливаем Content-Type, браузер сам установит\r\n  const headers = {\r\n    'Authorization': `Bearer ${token}`,\r\n    ...options.headers\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(url, {\r\n      ...options,\r\n      headers,\r\n      body: formData\r\n    });\r\n\r\n    // Если токен истек (401), пробуем обновить\r\n    if (response.status === 401) {\r\n      try {\r\n        const newToken = await refreshAccessToken();\r\n        headers.Authorization = `Bearer ${newToken}`;\r\n        \r\n        // Повторяем запрос с новым токеном\r\n        const retryResponse = await fetch(url, {\r\n          ...options,\r\n          headers,\r\n          body: formData\r\n        });\r\n        \r\n        if (retryResponse.status === 401) {\r\n          removeTokens();\r\n          throw new Error('Сессия истекла. Необходима повторная авторизация.');\r\n        }\r\n        \r\n        return retryResponse;\r\n      } catch (refreshError) {\r\n        removeTokens();\r\n        throw new Error('Не удалось обновить токен. Необходима повторная авторизация.');\r\n      }\r\n    }\r\n\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Ошибка API запроса с файлом:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}