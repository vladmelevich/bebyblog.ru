{"ast":null,"code":"import { getAuthToken, isTokenExpired, refreshToken } from './auth';\nconst API_BASE_URL = 'http://localhost:8000/api';\nclass ApiClient {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  setToken(token) {\n    // Токен теперь управляется через auth.js\n    console.log('Token set via auth.js');\n  }\n  getHeaders(includeContentType = true) {\n    const headers = {};\n    if (includeContentType) {\n      headers['Content-Type'] = 'application/json';\n    }\n    const token = getAuthToken();\n    if (token && !isTokenExpired(token)) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    return headers;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n\n    // Получаем актуальный токен\n    let token = getAuthToken();\n\n    // Проверяем, не истек ли токен\n    if (token && isTokenExpired(token)) {\n      try {\n        token = await refreshToken();\n      } catch (error) {\n        console.error('Failed to refresh token:', error);\n        throw new Error('Учетные данные не были предоставлены.');\n      }\n    }\n    if (!token) {\n      throw new Error('Учетные данные не были предоставлены.');\n    }\n\n    // Определяем, нужно ли включать Content-Type\n    const isFormData = options.body instanceof FormData;\n    const config = {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        ...(isFormData ? {} : {\n          'Content-Type': 'application/json'\n        }),\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      console.log('Raw response status:', response.status);\n      console.log('Raw response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('API Error:', {\n          status: response.status,\n          statusText: response.statusText,\n          url: url,\n          errorData: errorData\n        });\n        throw new Error(errorData.detail || errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      const responseData = await response.json();\n      console.log('Response data:', responseData);\n      return responseData;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Аутентификация\n  async register(userData) {\n    return this.request('/auth/register/', {\n      method: 'POST',\n      body: JSON.stringify({\n        email: userData.email,\n        password: userData.password,\n        name: `${userData.firstName} ${userData.lastName} ${Date.now()}`,\n        city: userData.city || '',\n        avatar: null\n      })\n    });\n  }\n  async login(email, password) {\n    return this.request('/auth/login/', {\n      method: 'POST',\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    });\n  }\n  async getCurrentUser() {\n    return this.request('/auth/me/');\n  }\n\n  // Пользователи\n  async getUsers() {\n    return this.request('/users');\n  }\n\n  // Чаты\n  async getChats() {\n    return this.request('/chats');\n  }\n  async createChat(user2Id) {\n    return this.request('/chats', {\n      method: 'POST',\n      body: JSON.stringify({\n        user2_id: user2Id\n      })\n    });\n  }\n\n  // Сообщения\n  async getMessages(chatId) {\n    return this.request(`/chats/${chatId}/messages`);\n  }\n  async sendMessage(chatId, text) {\n    return this.request(`/chats/${chatId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify({\n        text\n      })\n    });\n  }\n  async updateMessage(messageId, text) {\n    return this.request(`/messages/${messageId}`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        text\n      })\n    });\n  }\n  async deleteMessage(messageId) {\n    return this.request(`/messages/${messageId}`, {\n      method: 'DELETE'\n    });\n  }\n  async uploadFile(messageId, file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.request(`/messages/${messageId}/files`, {\n      method: 'POST',\n      body: formData\n    });\n  }\n\n  // Методы для постов (совместимость со старым API)\n  async createPost(postData) {\n    const formData = new FormData();\n\n    // Добавляем все поля в FormData\n    Object.keys(postData).forEach(key => {\n      if (postData[key] !== null && postData[key] !== undefined) {\n        formData.append(key, postData[key]);\n      }\n    });\n    return this.request('/posts/create/', {\n      method: 'POST',\n      body: formData\n    });\n  }\n  async updatePost(postId, postData) {\n    const formData = new FormData();\n    Object.keys(postData).forEach(key => {\n      if (postData[key] !== null && postData[key] !== undefined) {\n        formData.append(key, postData[key]);\n      }\n    });\n    return this.request(`/posts/${postId}/update/`, {\n      method: 'PUT',\n      body: formData\n    });\n  }\n  async getPosts() {\n    return this.request('/posts/');\n  }\n  async getPost(postId) {\n    return this.request(`/posts/${postId}/`);\n  }\n  async deletePost(postId) {\n    return this.request(`/posts/${postId}/delete/`, {\n      method: 'DELETE'\n    });\n  }\n  async getCategories() {\n    return this.request('/categories/');\n  }\n}\nexport const apiClient = new ApiClient();","map":{"version":3,"names":["getAuthToken","isTokenExpired","refreshToken","API_BASE_URL","ApiClient","constructor","baseURL","setToken","token","console","log","getHeaders","includeContentType","headers","request","endpoint","options","url","error","Error","isFormData","body","FormData","config","response","fetch","status","Object","fromEntries","entries","ok","errorData","json","catch","statusText","detail","message","responseData","register","userData","method","JSON","stringify","email","password","name","firstName","lastName","Date","now","city","avatar","login","getCurrentUser","getUsers","getChats","createChat","user2Id","user2_id","getMessages","chatId","sendMessage","text","updateMessage","messageId","deleteMessage","uploadFile","file","formData","append","createPost","postData","keys","forEach","key","undefined","updatePost","postId","getPosts","getPost","deletePost","getCategories","apiClient"],"sources":["C:/Users/Wlad/OneDrive/Desktop/kwork_site/src/utils/api.js"],"sourcesContent":["import { getAuthToken, isTokenExpired, refreshToken } from './auth';\n\nconst API_BASE_URL = 'http://localhost:8000/api';\n\nclass ApiClient {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  setToken(token) {\n    // Токен теперь управляется через auth.js\n    console.log('Token set via auth.js');\n  }\n\n  getHeaders(includeContentType = true) {\n    const headers = {};\n    \n    if (includeContentType) {\n      headers['Content-Type'] = 'application/json';\n    }\n    \n    const token = getAuthToken();\n    if (token && !isTokenExpired(token)) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    return headers;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    // Получаем актуальный токен\n    let token = getAuthToken();\n    \n    // Проверяем, не истек ли токен\n    if (token && isTokenExpired(token)) {\n      try {\n        token = await refreshToken();\n      } catch (error) {\n        console.error('Failed to refresh token:', error);\n        throw new Error('Учетные данные не были предоставлены.');\n      }\n    }\n    \n    if (!token) {\n      throw new Error('Учетные данные не были предоставлены.');\n    }\n    \n    // Определяем, нужно ли включать Content-Type\n    const isFormData = options.body instanceof FormData;\n    const config = {\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        ...(isFormData ? {} : { 'Content-Type': 'application/json' }),\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      console.log('Raw response status:', response.status);\n      console.log('Raw response headers:', Object.fromEntries(response.headers.entries()));\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error('API Error:', {\n          status: response.status,\n          statusText: response.statusText,\n          url: url,\n          errorData: errorData\n        });\n        throw new Error(errorData.detail || errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      \n      const responseData = await response.json();\n      console.log('Response data:', responseData);\n      return responseData;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Аутентификация\n  async register(userData) {\n    return this.request('/auth/register/', {\n      method: 'POST',\n      body: JSON.stringify({\n        email: userData.email,\n        password: userData.password,\n        name: `${userData.firstName} ${userData.lastName} ${Date.now()}`,\n        city: userData.city || '',\n        avatar: null\n      }),\n    });\n  }\n\n  async login(email, password) {\n    return this.request('/auth/login/', {\n      method: 'POST',\n      body: JSON.stringify({\n        email: email,\n        password: password\n      }),\n    });\n  }\n\n  async getCurrentUser() {\n    return this.request('/auth/me/');\n  }\n\n  // Пользователи\n  async getUsers() {\n    return this.request('/users');\n  }\n\n  // Чаты\n  async getChats() {\n    return this.request('/chats');\n  }\n\n  async createChat(user2Id) {\n    return this.request('/chats', {\n      method: 'POST',\n      body: JSON.stringify({ user2_id: user2Id }),\n    });\n  }\n\n  // Сообщения\n  async getMessages(chatId) {\n    return this.request(`/chats/${chatId}/messages`);\n  }\n\n  async sendMessage(chatId, text) {\n    return this.request(`/chats/${chatId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify({ text }),\n    });\n  }\n\n  async updateMessage(messageId, text) {\n    return this.request(`/messages/${messageId}`, {\n      method: 'PUT',\n      body: JSON.stringify({ text }),\n    });\n  }\n\n  async deleteMessage(messageId) {\n    return this.request(`/messages/${messageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async uploadFile(messageId, file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    return this.request(`/messages/${messageId}/files`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  // Методы для постов (совместимость со старым API)\n  async createPost(postData) {\n    const formData = new FormData();\n    \n    // Добавляем все поля в FormData\n    Object.keys(postData).forEach(key => {\n      if (postData[key] !== null && postData[key] !== undefined) {\n        formData.append(key, postData[key]);\n      }\n    });\n    \n    return this.request('/posts/create/', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  async updatePost(postId, postData) {\n    const formData = new FormData();\n    \n    Object.keys(postData).forEach(key => {\n      if (postData[key] !== null && postData[key] !== undefined) {\n        formData.append(key, postData[key]);\n      }\n    });\n    \n    return this.request(`/posts/${postId}/update/`, {\n      method: 'PUT',\n      body: formData,\n    });\n  }\n\n  async getPosts() {\n    return this.request('/posts/');\n  }\n\n  async getPost(postId) {\n    return this.request(`/posts/${postId}/`);\n  }\n\n  async deletePost(postId) {\n    return this.request(`/posts/${postId}/delete/`, {\n      method: 'DELETE',\n    });\n  }\n\n  async getCategories() {\n    return this.request('/categories/');\n  }\n}\n\nexport const apiClient = new ApiClient();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}