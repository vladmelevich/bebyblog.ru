{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Wlad\\\\OneDrive\\\\Desktop\\\\kwork_site\\\\src\\\\components\\\\ChatModal\\\\ChatModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport chatWebSocket from '../../utils/chatWebSocket';\nimport { makeAuthenticatedRequest } from '../../utils/auth';\nimport './ChatModal.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatModal = ({\n  isOpen,\n  onClose,\n  userId,\n  userName,\n  onChatCreated\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingUser, setTypingUser] = useState(null);\n  const chatIdRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n  useEffect(() => {\n    if (isOpen && userId) {\n      loadUserData();\n      loadChatMessages();\n      setupWebSocket();\n    }\n    return () => {\n      // Очистка при размонтировании\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      chatWebSocket.leaveChat();\n    };\n  }, [isOpen, userId]);\n  const setupWebSocket = () => {\n    // Временно отключаем WebSocket для отладки\n    console.log('WebSocket setup skipped for debugging');\n    return;\n\n    // Подключаемся к WebSocket\n    chatWebSocket.connect();\n\n    // Присоединяемся к чату\n    chatWebSocket.joinChat(userId);\n\n    // Обработчики сообщений\n    chatWebSocket.onMessage('new_message', message => {\n      setMessages(prev => [...prev, message]);\n      scrollToBottom();\n    });\n    chatWebSocket.onMessage('user_typing', data => {\n      if (data.user_id !== getCurrentUserId()) {\n        setTypingUser(data.user_name);\n        setIsTyping(true);\n\n        // Автоматически скрываем индикатор через 3 секунды\n        setTimeout(() => {\n          setIsTyping(false);\n          setTypingUser(null);\n        }, 3000);\n      }\n    });\n    chatWebSocket.onMessage('user_stop_typing', data => {\n      if (data.user_id !== getCurrentUserId()) {\n        setIsTyping(false);\n        setTypingUser(null);\n      }\n    });\n  };\n  const getCurrentUserId = () => {\n    const userDataString = localStorage.getItem('userData') || sessionStorage.getItem('userData');\n    if (userDataString) {\n      try {\n        const userData = JSON.parse(userDataString);\n        return parseInt(userData.id);\n      } catch (error) {\n        console.error('Ошибка парсинга userData:', error);\n      }\n    }\n    return null;\n  };\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const handleAvatarClick = senderId => {\n    // Закрываем модальное окно и переходим на страницу профиля пользователя\n    onClose();\n    navigate(`/profile/${senderId}`);\n  };\n  const loadUserData = async () => {\n    try {\n      const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\n      const response = await fetch(`http://localhost:8000/users/${userId}/`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.user) {\n          setUser(data.user);\n        }\n      }\n    } catch (error) {\n      console.error('Ошибка загрузки данных пользователя:', error);\n    }\n  };\n  const loadChatMessages = async () => {\n    try {\n      console.log('Loading chat messages...');\n\n      // Сначала проверяем, есть ли уже чат с этим пользователем\n      const chatResponse = await makeAuthenticatedRequest(`http://localhost:8000/api/users/async/chats/`);\n      if (chatResponse.ok) {\n        const chatData = await chatResponse.json();\n        console.log('Chat data received:', chatData);\n        const existingChat = chatData.chats.find(chat => chat.participants.some(p => p.id === parseInt(userId)));\n        if (existingChat) {\n          chatIdRef.current = existingChat.id;\n          // Загружаем сообщения существующего чата\n          const messagesResponse = await makeAuthenticatedRequest(`http://localhost:8000/api/users/async/chats/${userId}/messages/`);\n          if (messagesResponse.ok) {\n            const messagesData = await messagesResponse.json();\n            console.log('Загружены сообщения:', messagesData);\n            if (messagesData.success && messagesData.messages) {\n              setMessages(messagesData.messages);\n            }\n          } else {\n            console.error('Ошибка загрузки сообщений:', messagesResponse.status, await messagesResponse.text());\n          }\n        } else {\n          // Чат не существует, показываем пустой список\n          setMessages([]);\n        }\n      } else {\n        console.error('Ошибка загрузки чатов:', chatResponse.status, await chatResponse.text());\n      }\n    } catch (error) {\n      console.error('Ошибка загрузки сообщений:', error);\n      setMessages([]);\n    }\n  };\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (!newMessage.trim()) return;\n    const messageContent = newMessage.trim();\n    setNewMessage('');\n    try {\n      // Отправляем сообщение через API\n      const response = await makeAuthenticatedRequest(`http://localhost:8000/api/users/async/chats/${userId}/messages/create/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: messageContent,\n          message_type: 'text'\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.message) {\n          // Добавляем сообщение в локальное состояние\n          setMessages(prev => [...prev, data.message]);\n          scrollToBottom();\n        }\n      } else {\n        console.error('Ошибка отправки сообщения:', response.status);\n      }\n    } catch (error) {\n      console.error('Ошибка отправки сообщения:', error);\n    }\n\n    // Останавливаем индикатор печати (отключено для отладки)\n    // chatWebSocket.stopTyping(userId);\n  };\n  const handleInputChange = e => {\n    setNewMessage(e.target.value);\n\n    // Управление индикатором печати\n    if (e.target.value.trim()) {\n      chatWebSocket.startTyping(userId);\n\n      // Очищаем предыдущий таймаут\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n\n      // Устанавливаем новый таймаут для остановки индикатора\n      typingTimeoutRef.current = setTimeout(() => {\n        chatWebSocket.stopTyping(userId);\n      }, 1000);\n    } else {\n      chatWebSocket.stopTyping(userId);\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    }\n  };\n  if (!isOpen) return null;\n  const displayName = user ? user.first_name && user.last_name ? `${user.first_name} ${user.last_name}` : user.first_name || user.username || 'Пользователь' : userName || 'Пользователь';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-modal-overlay\",\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-modal\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-user-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"user-name\",\n            children: displayName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"user-status\",\n            children: \"\\u0411\\u044B\\u043B\\u0430 \\u043E\\u043D\\u043B\\u0430\\u0439\\u043D: 3 \\u043C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: onClose,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faTimes\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-modal-messages\",\n        children: messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-messages\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"empty-title\",\n            children: \"\\u0421\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0439 \\u043D\\u0435\\u0442.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"empty-subtitle\",\n            children: \"\\u0421\\u043E\\u0431\\u0435\\u0441\\u0435\\u0434\\u043D\\u0438\\u043A \\u043D\\u0435 \\u0432\\u0438\\u0434\\u0438\\u0442 \\u044D\\u0442\\u0443 \\u043F\\u0435\\u0440\\u0435\\u043F\\u0438\\u0441\\u043A\\u0443.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages-list\",\n          children: [messages.map(message => {\n            // Получаем ID пользователя из userData\n            const userDataString = localStorage.getItem('userData') || sessionStorage.getItem('userData');\n            let currentUserId = null;\n            if (userDataString) {\n              try {\n                const userData = JSON.parse(userDataString);\n                currentUserId = parseInt(userData.id);\n              } catch (error) {\n                console.error('Ошибка парсинга userData:', error);\n              }\n            }\n            const messageSenderId = parseInt(message.sender);\n            const isMyMessage = messageSenderId === currentUserId;\n\n            // Получаем информацию об отправителе\n            const senderInfo = message.sender_info || {};\n            const senderName = senderInfo.first_name && senderInfo.last_name ? `${senderInfo.first_name} ${senderInfo.last_name}` : senderInfo.first_name || senderInfo.username || 'Пользователь';\n            const senderAvatar = senderInfo.avatar || '/images/default-avatar.svg';\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${isMyMessage ? 'my-message' : 'incoming-message'}`,\n              children: [!isMyMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-avatar clickable-avatar\",\n                onClick: () => handleAvatarClick(messageSenderId),\n                title: `Перейти к профилю ${senderName}`,\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: senderAvatar,\n                  alt: senderName,\n                  onError: e => {\n                    e.target.src = '/images/default-avatar.svg';\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-wrapper\",\n                children: [!isMyMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-sender-name clickable-name\",\n                  onClick: () => handleAvatarClick(messageSenderId),\n                  title: `Перейти к профилю ${senderName}`,\n                  children: senderName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"message-content\",\n                  style: isMyMessage ? {\n                    backgroundColor: '#007bff',\n                    color: 'white'\n                  } : {\n                    backgroundColor: '#ffffff',\n                    color: 'black'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: message.content\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 306,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"message-time\",\n                    children: new Date(message.created_at).toLocaleTimeString('ru-RU', {\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 307,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 21\n              }, this)]\n            }, message.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 19\n            }, this);\n          }), isTyping && typingUser && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"typing-indicator\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"typing-dots\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"typing-text\",\n              children: [typingUser, \" \\u043F\\u0435\\u0447\\u0430\\u0442\\u0430\\u0435\\u0442...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: messagesEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-modal-input\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"message-input\",\n            placeholder: \"\\u0412\\u0430\\u0448\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435\",\n            value: newMessage,\n            onChange: handleInputChange,\n            onKeyPress: e => e.key === 'Enter' && handleSendMessage(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"send-button\",\n            onClick: handleSendMessage,\n            disabled: !newMessage.trim() || loading,\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faPaperPlane\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatModal, \"HTP/Nk7IwDd6HOyf7ux8HwXb4P0=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatModal;\nexport default ChatModal;\nvar _c;\n$RefreshReg$(_c, \"ChatModal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","FontAwesomeIcon","faPaperPlane","faTimes","chatWebSocket","makeAuthenticatedRequest","jsxDEV","_jsxDEV","ChatModal","isOpen","onClose","userId","userName","onChatCreated","_s","navigate","messages","setMessages","newMessage","setNewMessage","user","setUser","loading","setLoading","isTyping","setIsTyping","typingUser","setTypingUser","chatIdRef","messagesEndRef","typingTimeoutRef","loadUserData","loadChatMessages","setupWebSocket","current","clearTimeout","leaveChat","console","log","connect","joinChat","onMessage","message","prev","scrollToBottom","data","user_id","getCurrentUserId","user_name","setTimeout","userDataString","localStorage","getItem","sessionStorage","userData","JSON","parse","parseInt","id","error","_messagesEndRef$curre","scrollIntoView","behavior","handleAvatarClick","senderId","token","response","fetch","headers","ok","json","success","chatResponse","chatData","existingChat","chats","find","chat","participants","some","p","messagesResponse","messagesData","status","text","handleSendMessage","e","preventDefault","trim","messageContent","method","body","stringify","content","message_type","handleInputChange","target","value","startTyping","stopTyping","displayName","first_name","last_name","username","className","onClick","children","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","icon","length","map","currentUserId","messageSenderId","sender","isMyMessage","senderInfo","sender_info","senderName","senderAvatar","avatar","title","src","alt","onError","style","backgroundColor","color","Date","created_at","toLocaleTimeString","hour","minute","ref","type","placeholder","onChange","onKeyPress","key","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Wlad/OneDrive/Desktop/kwork_site/src/components/ChatModal/ChatModal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport chatWebSocket from '../../utils/chatWebSocket';\nimport { makeAuthenticatedRequest } from '../../utils/auth';\nimport './ChatModal.css';\n\nconst ChatModal = ({ isOpen, onClose, userId, userName, onChatCreated }) => {\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingUser, setTypingUser] = useState(null);\n  const chatIdRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  useEffect(() => {\n    if (isOpen && userId) {\n      loadUserData();\n      loadChatMessages();\n      setupWebSocket();\n    }\n\n    return () => {\n      // Очистка при размонтировании\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      chatWebSocket.leaveChat();\n    };\n  }, [isOpen, userId]);\n\n  const setupWebSocket = () => {\n    // Временно отключаем WebSocket для отладки\n    console.log('WebSocket setup skipped for debugging');\n    return;\n    \n    // Подключаемся к WebSocket\n    chatWebSocket.connect();\n\n    // Присоединяемся к чату\n    chatWebSocket.joinChat(userId);\n\n    // Обработчики сообщений\n    chatWebSocket.onMessage('new_message', (message) => {\n      setMessages(prev => [...prev, message]);\n      scrollToBottom();\n    });\n\n    chatWebSocket.onMessage('user_typing', (data) => {\n      if (data.user_id !== getCurrentUserId()) {\n        setTypingUser(data.user_name);\n        setIsTyping(true);\n        \n        // Автоматически скрываем индикатор через 3 секунды\n        setTimeout(() => {\n          setIsTyping(false);\n          setTypingUser(null);\n        }, 3000);\n      }\n    });\n\n    chatWebSocket.onMessage('user_stop_typing', (data) => {\n      if (data.user_id !== getCurrentUserId()) {\n        setIsTyping(false);\n        setTypingUser(null);\n      }\n    });\n  };\n\n  const getCurrentUserId = () => {\n    const userDataString = localStorage.getItem('userData') || sessionStorage.getItem('userData');\n    if (userDataString) {\n      try {\n        const userData = JSON.parse(userDataString);\n        return parseInt(userData.id);\n      } catch (error) {\n        console.error('Ошибка парсинга userData:', error);\n      }\n    }\n    return null;\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const handleAvatarClick = (senderId) => {\n    // Закрываем модальное окно и переходим на страницу профиля пользователя\n    onClose();\n    navigate(`/profile/${senderId}`);\n  };\n\n  const loadUserData = async () => {\n    try {\n      const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\n      const response = await fetch(`http://localhost:8000/users/${userId}/`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.user) {\n          setUser(data.user);\n        }\n      }\n    } catch (error) {\n      console.error('Ошибка загрузки данных пользователя:', error);\n    }\n  };\n\n  const loadChatMessages = async () => {\n    try {\n      console.log('Loading chat messages...');\n      \n      // Сначала проверяем, есть ли уже чат с этим пользователем\n      const chatResponse = await makeAuthenticatedRequest(`http://localhost:8000/api/users/async/chats/`);\n\n      if (chatResponse.ok) {\n        const chatData = await chatResponse.json();\n        console.log('Chat data received:', chatData);\n        const existingChat = chatData.chats.find(chat => \n          chat.participants.some(p => p.id === parseInt(userId))\n        );\n        \n        if (existingChat) {\n          chatIdRef.current = existingChat.id;\n          // Загружаем сообщения существующего чата\n          const messagesResponse = await makeAuthenticatedRequest(`http://localhost:8000/api/users/async/chats/${userId}/messages/`);\n          \n          if (messagesResponse.ok) {\n            const messagesData = await messagesResponse.json();\n            console.log('Загружены сообщения:', messagesData);\n            if (messagesData.success && messagesData.messages) {\n              setMessages(messagesData.messages);\n            }\n          } else {\n            console.error('Ошибка загрузки сообщений:', messagesResponse.status, await messagesResponse.text());\n          }\n        } else {\n          // Чат не существует, показываем пустой список\n          setMessages([]);\n        }\n      } else {\n        console.error('Ошибка загрузки чатов:', chatResponse.status, await chatResponse.text());\n      }\n    } catch (error) {\n      console.error('Ошибка загрузки сообщений:', error);\n      setMessages([]);\n    }\n  };\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    if (!newMessage.trim()) return;\n\n    const messageContent = newMessage.trim();\n    setNewMessage('');\n    \n    try {\n      // Отправляем сообщение через API\n      const response = await makeAuthenticatedRequest(\n        `http://localhost:8000/api/users/async/chats/${userId}/messages/create/`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            content: messageContent,\n            message_type: 'text'\n          })\n        }\n      );\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.message) {\n          // Добавляем сообщение в локальное состояние\n          setMessages(prev => [...prev, data.message]);\n          scrollToBottom();\n        }\n      } else {\n        console.error('Ошибка отправки сообщения:', response.status);\n      }\n    } catch (error) {\n      console.error('Ошибка отправки сообщения:', error);\n    }\n    \n    // Останавливаем индикатор печати (отключено для отладки)\n    // chatWebSocket.stopTyping(userId);\n  };\n\n  const handleInputChange = (e) => {\n    setNewMessage(e.target.value);\n    \n    // Управление индикатором печати\n    if (e.target.value.trim()) {\n      chatWebSocket.startTyping(userId);\n      \n      // Очищаем предыдущий таймаут\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      \n      // Устанавливаем новый таймаут для остановки индикатора\n      typingTimeoutRef.current = setTimeout(() => {\n        chatWebSocket.stopTyping(userId);\n      }, 1000);\n    } else {\n      chatWebSocket.stopTyping(userId);\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    }\n  };\n\n  if (!isOpen) return null;\n\n  const displayName = user ? \n    (user.first_name && user.last_name ? `${user.first_name} ${user.last_name}` : \n     user.first_name || user.username || 'Пользователь') : \n    userName || 'Пользователь';\n\n  return (\n    <div className=\"chat-modal-overlay\" onClick={onClose}>\n      <div className=\"chat-modal\" onClick={(e) => e.stopPropagation()}>\n        {/* Заголовок модального окна */}\n        <div className=\"chat-modal-header\">\n          <div className=\"chat-user-info\">\n            <h3 className=\"user-name\">{displayName}</h3>\n            <p className=\"user-status\">Была онлайн: 3 м</p>\n          </div>\n          <button className=\"close-button\" onClick={onClose}>\n            <FontAwesomeIcon icon={faTimes} />\n          </button>\n        </div>\n\n        {/* Контейнер сообщений */}\n        <div className=\"chat-modal-messages\">\n          {messages.length === 0 ? (\n            <div className=\"empty-messages\">\n              <p className=\"empty-title\">Сообщений нет.</p>\n              <p className=\"empty-subtitle\">Собеседник не видит эту переписку.</p>\n            </div>\n          ) : (\n            <div className=\"messages-list\">\n              {messages.map((message) => {\n                // Получаем ID пользователя из userData\n                const userDataString = localStorage.getItem('userData') || sessionStorage.getItem('userData');\n                let currentUserId = null;\n                if (userDataString) {\n                  try {\n                    const userData = JSON.parse(userDataString);\n                    currentUserId = parseInt(userData.id);\n                  } catch (error) {\n                    console.error('Ошибка парсинга userData:', error);\n                  }\n                }\n                \n                const messageSenderId = parseInt(message.sender);\n                const isMyMessage = messageSenderId === currentUserId;\n                \n                // Получаем информацию об отправителе\n                const senderInfo = message.sender_info || {};\n                const senderName = senderInfo.first_name && senderInfo.last_name \n                  ? `${senderInfo.first_name} ${senderInfo.last_name}`\n                  : senderInfo.first_name || senderInfo.username || 'Пользователь';\n                const senderAvatar = senderInfo.avatar || '/images/default-avatar.svg';\n\n                return (\n                  <div key={message.id} className={`message ${isMyMessage ? 'my-message' : 'incoming-message'}`}>\n                    {!isMyMessage && (\n                      <div \n                        className=\"message-avatar clickable-avatar\"\n                        onClick={() => handleAvatarClick(messageSenderId)}\n                        title={`Перейти к профилю ${senderName}`}\n                      >\n                        <img \n                          src={senderAvatar} \n                          alt={senderName}\n                          onError={(e) => {\n                            e.target.src = '/images/default-avatar.svg';\n                          }}\n                        />\n                      </div>\n                    )}\n                    <div className=\"message-wrapper\">\n                      {!isMyMessage && (\n                        <div \n                          className=\"message-sender-name clickable-name\"\n                          onClick={() => handleAvatarClick(messageSenderId)}\n                          title={`Перейти к профилю ${senderName}`}\n                        >\n                          {senderName}\n                        </div>\n                      )}\n                      <div className=\"message-content\" style={isMyMessage ? {backgroundColor: '#007bff', color: 'white'} : {backgroundColor: '#ffffff', color: 'black'}}>\n                        <p>{message.content}</p>\n                        <span className=\"message-time\">\n                          {new Date(message.created_at).toLocaleTimeString('ru-RU', {\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n              \n              {/* Индикатор печати */}\n              {isTyping && typingUser && (\n                <div className=\"typing-indicator\">\n                  <div className=\"typing-dots\">\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                  </div>\n                  <span className=\"typing-text\">{typingUser} печатает...</span>\n                </div>\n              )}\n              \n              {/* Элемент для автоматической прокрутки */}\n              <div ref={messagesEndRef} />\n            </div>\n          )}\n        </div>\n\n        {/* Поле ввода сообщения */}\n        <div className=\"chat-modal-input\">\n          <div className=\"message-input-wrapper\">\n            <input\n              type=\"text\"\n              className=\"message-input\"\n              placeholder=\"Ваше сообщение\"\n              value={newMessage}\n              onChange={handleInputChange}\n              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage(e)}\n            />\n            <button \n              className=\"send-button\" \n              onClick={handleSendMessage}\n              disabled={!newMessage.trim() || loading}\n            >\n              <FontAwesomeIcon icon={faPaperPlane} />\n              <span>Отправить</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}