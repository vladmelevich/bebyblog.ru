{"ast":null,"code":"class ChatWebSocket {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectInterval = 3000;\n    this.messageHandlers = new Map();\n    this.notificationHandlers = new Map();\n  }\n  connect() {\n    const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\n    if (!token) {\n      console.error('No access token found');\n      return;\n    }\n\n    // Проверяем, не истек ли токен\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      if (payload.exp < currentTime) {\n        console.error('Token expired');\n        return;\n      }\n    } catch (error) {\n      console.error('Invalid token:', error);\n      return;\n    }\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//localhost:8000/ws/chat/?token=${token}`;\n    this.socket = new WebSocket(wsUrl);\n    this.socket.onopen = event => {\n      console.log('WebSocket connected');\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n    };\n    this.socket.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        this.handleMessage(data);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n    this.socket.onclose = event => {\n      console.log('WebSocket disconnected');\n      this.isConnected = false;\n      this.attemptReconnect();\n    };\n    this.socket.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n  }\n  handleMessage(data) {\n    console.log('WebSocket message received:', data);\n    switch (data.type) {\n      case 'connection_established':\n        console.log('Connection established:', data.message);\n        break;\n      case 'chat_message':\n        this.notifyMessageHandlers('new_message', data.message);\n        break;\n      case 'user_typing':\n        this.notifyMessageHandlers('user_typing', data);\n        break;\n      case 'user_stop_typing':\n        this.notifyMessageHandlers('user_stop_typing', data);\n        break;\n      case 'new_notification':\n        this.notifyNotificationHandlers('new_notification', data.notification);\n        break;\n      case 'error':\n        console.error('WebSocket error:', data.message);\n        break;\n      default:\n        console.log('Unknown message type:', data.type);\n    }\n  }\n  send(data) {\n    if (this.socket && this.isConnected) {\n      this.socket.send(JSON.stringify(data));\n    } else {\n      console.error('WebSocket not connected');\n    }\n  }\n  joinChat(userId) {\n    this.send({\n      type: 'join_chat',\n      user_id: userId\n    });\n  }\n  leaveChat() {\n    this.send({\n      type: 'leave_chat'\n    });\n  }\n  sendMessage(userId, content, messageType = 'text', replyTo = null) {\n    this.send({\n      type: 'send_message',\n      user_id: userId,\n      content: content,\n      message_type: messageType,\n      reply_to: replyTo\n    });\n  }\n  startTyping(userId) {\n    this.send({\n      type: 'typing',\n      user_id: userId\n    });\n  }\n  stopTyping(userId) {\n    this.send({\n      type: 'stop_typing',\n      user_id: userId\n    });\n  }\n  onMessage(eventType, handler) {\n    if (!this.messageHandlers.has(eventType)) {\n      this.messageHandlers.set(eventType, []);\n    }\n    this.messageHandlers.get(eventType).push(handler);\n  }\n  offMessage(eventType, handler) {\n    if (this.messageHandlers.has(eventType)) {\n      const handlers = this.messageHandlers.get(eventType);\n      const index = handlers.indexOf(handler);\n      if (index > -1) {\n        handlers.splice(index, 1);\n      }\n    }\n  }\n  onNotification(eventType, handler) {\n    if (!this.notificationHandlers.has(eventType)) {\n      this.notificationHandlers.set(eventType, []);\n    }\n    this.notificationHandlers.get(eventType).push(handler);\n  }\n  offNotification(eventType, handler) {\n    if (this.notificationHandlers.has(eventType)) {\n      const handlers = this.notificationHandlers.get(eventType);\n      const index = handlers.indexOf(handler);\n      if (index > -1) {\n        handlers.splice(index, 1);\n      }\n    }\n  }\n  notifyMessageHandlers(eventType, data) {\n    if (this.messageHandlers.has(eventType)) {\n      this.messageHandlers.get(eventType).forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.error('Error in message handler:', error);\n        }\n      });\n    }\n  }\n  notifyNotificationHandlers(eventType, data) {\n    if (this.notificationHandlers.has(eventType)) {\n      this.notificationHandlers.get(eventType).forEach(handler => {\n        try {\n          handler(data);\n        } catch (error) {\n          console.error('Error in notification handler:', error);\n        }\n      });\n    }\n  }\n  attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      setTimeout(() => {\n        this.connect();\n      }, this.reconnectInterval);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n}\n\n// Создаем глобальный экземпляр\nconst chatWebSocket = new ChatWebSocket();\nexport default chatWebSocket;","map":{"version":3,"names":["ChatWebSocket","constructor","socket","isConnected","reconnectAttempts","maxReconnectAttempts","reconnectInterval","messageHandlers","Map","notificationHandlers","connect","token","localStorage","getItem","sessionStorage","console","error","payload","JSON","parse","atob","split","currentTime","Date","now","exp","protocol","window","location","wsUrl","WebSocket","onopen","event","log","onmessage","data","handleMessage","onclose","attemptReconnect","onerror","type","message","notifyMessageHandlers","notifyNotificationHandlers","notification","send","stringify","joinChat","userId","user_id","leaveChat","sendMessage","content","messageType","replyTo","message_type","reply_to","startTyping","stopTyping","onMessage","eventType","handler","has","set","get","push","offMessage","handlers","index","indexOf","splice","onNotification","offNotification","forEach","setTimeout","disconnect","close","chatWebSocket"],"sources":["C:/Users/Wlad/OneDrive/Desktop/kwork_site/src/utils/chatWebSocket.js"],"sourcesContent":["class ChatWebSocket {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.isConnected = false;\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectInterval = 3000;\r\n    this.messageHandlers = new Map();\r\n    this.notificationHandlers = new Map();\r\n  }\r\n\r\n  connect() {\r\n    const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\r\n    if (!token) {\r\n      console.error('No access token found');\r\n      return;\r\n    }\r\n    \r\n    // Проверяем, не истек ли токен\r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      const currentTime = Date.now() / 1000;\r\n      if (payload.exp < currentTime) {\r\n        console.error('Token expired');\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.error('Invalid token:', error);\r\n      return;\r\n    }\r\n\r\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const wsUrl = `${protocol}//localhost:8000/ws/chat/?token=${token}`;\r\n    \r\n    this.socket = new WebSocket(wsUrl);\r\n\r\n    this.socket.onopen = (event) => {\r\n      console.log('WebSocket connected');\r\n      this.isConnected = true;\r\n      this.reconnectAttempts = 0;\r\n    };\r\n\r\n    this.socket.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        this.handleMessage(data);\r\n      } catch (error) {\r\n        console.error('Error parsing WebSocket message:', error);\r\n      }\r\n    };\r\n\r\n    this.socket.onclose = (event) => {\r\n      console.log('WebSocket disconnected');\r\n      this.isConnected = false;\r\n      this.attemptReconnect();\r\n    };\r\n\r\n    this.socket.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n    };\r\n  }\r\n\r\n  handleMessage(data) {\r\n    console.log('WebSocket message received:', data);\r\n    \r\n    switch (data.type) {\r\n      case 'connection_established':\r\n        console.log('Connection established:', data.message);\r\n        break;\r\n      case 'chat_message':\r\n        this.notifyMessageHandlers('new_message', data.message);\r\n        break;\r\n      case 'user_typing':\r\n        this.notifyMessageHandlers('user_typing', data);\r\n        break;\r\n      case 'user_stop_typing':\r\n        this.notifyMessageHandlers('user_stop_typing', data);\r\n        break;\r\n      case 'new_notification':\r\n        this.notifyNotificationHandlers('new_notification', data.notification);\r\n        break;\r\n      case 'error':\r\n        console.error('WebSocket error:', data.message);\r\n        break;\r\n      default:\r\n        console.log('Unknown message type:', data.type);\r\n    }\r\n  }\r\n\r\n  send(data) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.send(JSON.stringify(data));\r\n    } else {\r\n      console.error('WebSocket not connected');\r\n    }\r\n  }\r\n\r\n  joinChat(userId) {\r\n    this.send({\r\n      type: 'join_chat',\r\n      user_id: userId\r\n    });\r\n  }\r\n\r\n  leaveChat() {\r\n    this.send({\r\n      type: 'leave_chat'\r\n    });\r\n  }\r\n\r\n  sendMessage(userId, content, messageType = 'text', replyTo = null) {\r\n    this.send({\r\n      type: 'send_message',\r\n      user_id: userId,\r\n      content: content,\r\n      message_type: messageType,\r\n      reply_to: replyTo\r\n    });\r\n  }\r\n\r\n  startTyping(userId) {\r\n    this.send({\r\n      type: 'typing',\r\n      user_id: userId\r\n    });\r\n  }\r\n\r\n  stopTyping(userId) {\r\n    this.send({\r\n      type: 'stop_typing',\r\n      user_id: userId\r\n    });\r\n  }\r\n\r\n  onMessage(eventType, handler) {\r\n    if (!this.messageHandlers.has(eventType)) {\r\n      this.messageHandlers.set(eventType, []);\r\n    }\r\n    this.messageHandlers.get(eventType).push(handler);\r\n  }\r\n\r\n  offMessage(eventType, handler) {\r\n    if (this.messageHandlers.has(eventType)) {\r\n      const handlers = this.messageHandlers.get(eventType);\r\n      const index = handlers.indexOf(handler);\r\n      if (index > -1) {\r\n        handlers.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  onNotification(eventType, handler) {\r\n    if (!this.notificationHandlers.has(eventType)) {\r\n      this.notificationHandlers.set(eventType, []);\r\n    }\r\n    this.notificationHandlers.get(eventType).push(handler);\r\n  }\r\n\r\n  offNotification(eventType, handler) {\r\n    if (this.notificationHandlers.has(eventType)) {\r\n      const handlers = this.notificationHandlers.get(eventType);\r\n      const index = handlers.indexOf(handler);\r\n      if (index > -1) {\r\n        handlers.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  notifyMessageHandlers(eventType, data) {\r\n    if (this.messageHandlers.has(eventType)) {\r\n      this.messageHandlers.get(eventType).forEach(handler => {\r\n        try {\r\n          handler(data);\r\n        } catch (error) {\r\n          console.error('Error in message handler:', error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  notifyNotificationHandlers(eventType, data) {\r\n    if (this.notificationHandlers.has(eventType)) {\r\n      this.notificationHandlers.get(eventType).forEach(handler => {\r\n        try {\r\n          handler(data);\r\n        } catch (error) {\r\n          console.error('Error in notification handler:', error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  attemptReconnect() {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\r\n      \r\n      setTimeout(() => {\r\n        this.connect();\r\n      }, this.reconnectInterval);\r\n    } else {\r\n      console.error('Max reconnection attempts reached');\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.close();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n}\r\n\r\n// Создаем глобальный экземпляр\r\nconst chatWebSocket = new ChatWebSocket();\r\n\r\nexport default chatWebSocket;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}