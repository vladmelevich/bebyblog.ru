{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000/api';\nclass ApiClient {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n    this.token = localStorage.getItem('access_token');\n  }\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('access_token', token);\n  }\n  getHeaders(includeContentType = true) {\n    const headers = {};\n    if (includeContentType) {\n      headers['Content-Type'] = 'application/json';\n    }\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    return headers;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n\n    // Определяем, нужно ли включать Content-Type\n    const isFormData = options.body instanceof FormData;\n    const config = {\n      headers: this.getHeaders(!isFormData),\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Аутентификация\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(email, password) {\n    const formData = new FormData();\n    formData.append('email', email);\n    formData.append('password', password);\n    return this.request('/auth/login/', {\n      method: 'POST',\n      body: formData\n    });\n  }\n  async getCurrentUser() {\n    return this.request('/users/me/');\n  }\n\n  // Пользователи\n  async getUsers() {\n    return this.request('/users/');\n  }\n\n  // Чаты\n  async getChats() {\n    return this.request('/chats/');\n  }\n  async createChat(user2Id) {\n    return this.request('/chats/', {\n      method: 'POST',\n      body: JSON.stringify({\n        user2_id: user2Id\n      })\n    });\n  }\n\n  // Сообщения\n  async getMessages(chatId) {\n    return this.request(`/chats/${chatId}/messages`);\n  }\n  async sendMessage(chatId, text) {\n    return this.request(`/chats/${chatId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify({\n        text\n      })\n    });\n  }\n  async updateMessage(messageId, text) {\n    return this.request(`/messages/${messageId}`, {\n      method: 'PUT',\n      body: JSON.stringify({\n        text\n      })\n    });\n  }\n  async deleteMessage(messageId) {\n    return this.request(`/messages/${messageId}`, {\n      method: 'DELETE'\n    });\n  }\n  async uploadFile(messageId, file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    return this.request(`/messages/${messageId}/files`, {\n      method: 'POST',\n      body: formData\n    });\n  }\n\n  // Методы для постов (совместимость со старым API)\n  async createPost(postData) {\n    const formData = new FormData();\n\n    // Добавляем все поля в FormData\n    Object.keys(postData).forEach(key => {\n      if (postData[key] !== null && postData[key] !== undefined) {\n        formData.append(key, postData[key]);\n      }\n    });\n    return this.request('/posts/create/', {\n      method: 'POST',\n      body: formData\n    });\n  }\n  async updatePost(postId, postData) {\n    const formData = new FormData();\n    Object.keys(postData).forEach(key => {\n      if (postData[key] !== null && postData[key] !== undefined) {\n        formData.append(key, postData[key]);\n      }\n    });\n    return this.request(`/posts/${postId}/update/`, {\n      method: 'PUT',\n      body: formData\n    });\n  }\n  async getPosts() {\n    return this.request('/posts/');\n  }\n  async getPost(postId) {\n    return this.request(`/posts/${postId}/`);\n  }\n  async deletePost(postId) {\n    return this.request(`/posts/${postId}/delete/`, {\n      method: 'DELETE'\n    });\n  }\n  async getCategories() {\n    return this.request('/categories/');\n  }\n}\nexport const apiClient = new ApiClient();","map":{"version":3,"names":["API_BASE_URL","ApiClient","constructor","baseURL","token","localStorage","getItem","setToken","setItem","getHeaders","includeContentType","headers","request","endpoint","options","url","isFormData","body","FormData","config","response","fetch","ok","errorData","json","catch","Error","detail","status","error","console","register","userData","method","JSON","stringify","login","email","password","formData","append","getCurrentUser","getUsers","getChats","createChat","user2Id","user2_id","getMessages","chatId","sendMessage","text","updateMessage","messageId","deleteMessage","uploadFile","file","createPost","postData","Object","keys","forEach","key","undefined","updatePost","postId","getPosts","getPost","deletePost","getCategories","apiClient"],"sources":["C:/Users/Wlad/OneDrive/Desktop/kwork_site/src/utils/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000/api';\n\nclass ApiClient {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n    this.token = localStorage.getItem('access_token');\n  }\n\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('access_token', token);\n  }\n\n  getHeaders(includeContentType = true) {\n    const headers = {};\n    \n    if (includeContentType) {\n      headers['Content-Type'] = 'application/json';\n    }\n    \n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    \n    return headers;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    // Определяем, нужно ли включать Content-Type\n    const isFormData = options.body instanceof FormData;\n    const config = {\n      headers: this.getHeaders(!isFormData),\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Аутентификация\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  async login(email, password) {\n    const formData = new FormData();\n    formData.append('email', email);\n    formData.append('password', password);\n    \n    return this.request('/auth/login/', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  async getCurrentUser() {\n    return this.request('/users/me/');\n  }\n\n  // Пользователи\n  async getUsers() {\n    return this.request('/users/');\n  }\n\n  // Чаты\n  async getChats() {\n    return this.request('/chats/');\n  }\n\n  async createChat(user2Id) {\n    return this.request('/chats/', {\n      method: 'POST',\n      body: JSON.stringify({ user2_id: user2Id }),\n    });\n  }\n\n  // Сообщения\n  async getMessages(chatId) {\n    return this.request(`/chats/${chatId}/messages`);\n  }\n\n  async sendMessage(chatId, text) {\n    return this.request(`/chats/${chatId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify({ text }),\n    });\n  }\n\n  async updateMessage(messageId, text) {\n    return this.request(`/messages/${messageId}`, {\n      method: 'PUT',\n      body: JSON.stringify({ text }),\n    });\n  }\n\n  async deleteMessage(messageId) {\n    return this.request(`/messages/${messageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async uploadFile(messageId, file) {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    return this.request(`/messages/${messageId}/files`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  // Методы для постов (совместимость со старым API)\n  async createPost(postData) {\n    const formData = new FormData();\n    \n    // Добавляем все поля в FormData\n    Object.keys(postData).forEach(key => {\n      if (postData[key] !== null && postData[key] !== undefined) {\n        formData.append(key, postData[key]);\n      }\n    });\n    \n    return this.request('/posts/create/', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  async updatePost(postId, postData) {\n    const formData = new FormData();\n    \n    Object.keys(postData).forEach(key => {\n      if (postData[key] !== null && postData[key] !== undefined) {\n        formData.append(key, postData[key]);\n      }\n    });\n    \n    return this.request(`/posts/${postId}/update/`, {\n      method: 'PUT',\n      body: formData,\n    });\n  }\n\n  async getPosts() {\n    return this.request('/posts/');\n  }\n\n  async getPost(postId) {\n    return this.request(`/posts/${postId}/`);\n  }\n\n  async deletePost(postId) {\n    return this.request(`/posts/${postId}/delete/`, {\n      method: 'DELETE',\n    });\n  }\n\n  async getCategories() {\n    return this.request('/categories/');\n  }\n}\n\nexport const apiClient = new ApiClient();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}