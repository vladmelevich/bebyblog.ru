import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
  faEye, 
  faEyeSlash,
  faArrowLeft,
  faUser,
  faCheck
} from '@fortawesome/free-solid-svg-icons';
import { saveTokens } from '../../utils/auth';
import { apiClient } from '../../utils/api';
import './AuthPage.css';

const AuthPage = () => {
  const navigate = useNavigate();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);

  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º apiClient –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const response = await apiClient.login(email, password);
      console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', response);
      console.log('–¢–∏–ø –æ—Ç–≤–µ—Ç–∞:', typeof response);
      console.log('–ö–ª—é—á–∏ –≤ –æ—Ç–≤–µ—Ç–µ:', Object.keys(response || {}));
      console.log('response.id:', response.id);
      console.log('response.access_token:', response.access_token);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!response || typeof response !== 'object') {
        console.error('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        setIsLoading(false);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!response.id) {
        console.error('–û—à–∏–±–∫–∞: response.id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:', response);
        console.error('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(response, null, 2));
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        setIsLoading(false);
        return;
      }
      
      console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω:', response.id);
      
      const token = response.access_token || response.access;
      const refreshToken = response.refresh_token || response.refresh;
      
      if (token) {
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã —Å —É—á–µ—Ç–æ–º "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
        saveTokens(token, refreshToken, rememberMe);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Header
        const nameParts = response.name?.split(' ') || [];
        const userData = {
          id: response.id,
          first_name: response.first_name || nameParts[0] || '',
          last_name: response.last_name || nameParts[1] || '',
          email: response.email,
          username: response.username || response.name,
          city: response.city || null,
          avatar: response.avatar || null,
          date_joined: response.date_joined || null,
          status: response.status || null,
          birth_date: response.birth_date || null
        };
        
        console.log('üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response);
        console.log('üîç –ê–≤–∞—Ç–∞—Ä –≤ –æ—Ç–≤–µ—Ç–µ:', response.avatar);
        
        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
        console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response.id);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
        if (rememberMe) {
          localStorage.setItem('userData', JSON.stringify(userData));
        } else {
          sessionStorage.setItem('userData', JSON.stringify(userData));
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Header
        window.dispatchEvent(new Event('authUpdate'));
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Header, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        setTimeout(() => {
          navigate(`/profile/${response.id}`);
        }, 100);
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
      console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', typeof err);
      console.error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', err.message);
      setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsLoading(false);
    }
  };

  const togglePasswordVisibility = () => {
    setShowPassword(!showPassword);
  };

  return (
    <div className="auth-page">
      <div className="auth-container">
        {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" */}
        <Link to="/" className="back-button">
          <FontAwesomeIcon icon={faArrowLeft} />
          <span>–ù–∞–∑–∞–¥</span>
        </Link>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="auth-header">
          <div className="auth-icon">
            <FontAwesomeIcon icon={faUser} />
          </div>
          <h1>–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç</h1>
          <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</p>
        </div>

        {/* –§–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
        <form className="auth-form" onSubmit={handleSubmit}>
          {error && (
            <div className="error-message">
              {error}
            </div>
          )}

          {/* Email –ø–æ–ª–µ */}
          <div className="form-group">
            <label htmlFor="email">Email</label>
            <div className="input-wrapper">
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
                required
              />
            </div>
          </div>

          {/* –ü–∞—Ä–æ–ª—å –ø–æ–ª–µ */}
          <div className="form-group">
            <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
            <div className="input-wrapper">
              <input
                type={showPassword ? 'text' : 'password'}
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
                required
              />
              <button
                type="button"
                className="password-toggle"
                onClick={togglePasswordVisibility}
              >
                <FontAwesomeIcon icon={showPassword ? faEyeSlash : faEye} />
              </button>
            </div>
          </div>

          {/* –ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è –∏ –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å */}
          <div className="auth-options">
            <div className="remember-me">
              <label className="checkbox-label">
                <input
                  type="checkbox"
                  checked={rememberMe}
                  onChange={(e) => setRememberMe(e.target.checked)}
                  className="checkbox-input"
                />
                <span className="checkbox-custom">
                  {rememberMe && <FontAwesomeIcon icon={faCheck} />}
                </span>
                <span className="checkbox-text">–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è</span>
              </label>
            </div>
            
            <div className="forgot-password">
              <Link to="/forgot-password">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</Link>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ */}
          <button 
            type="submit" 
            className="auth-button"
            disabled={isLoading}
          >
            {isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
          </button>
        </form>

        {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
        <div className="auth-divider">
          <span>–∏–ª–∏</span>
        </div>

        {/* –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é */}
        <div className="auth-footer">
          <p>
            –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
            <Link to="/register" className="register-link">
              –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default AuthPage;
