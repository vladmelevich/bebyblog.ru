import React, { useState, useEffect } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { 
  faTimes, 
  faUserFriends, 
  faBookmark, 
  faCheck,
  faSearch,
  faShare,
  faHeart
} from '@fortawesome/free-solid-svg-icons';
import './ShareModal.css';

const ShareModal = ({ isOpen, onClose, post }) => {
  const [activeTab, setActiveTab] = useState('friends'); // 'friends' –∏–ª–∏ 'archive'
  const [friends, setFriends] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedFriends, setSelectedFriends] = useState([]);
  const [isInArchive, setIsInArchive] = useState(false);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [successMessage, setSuccessMessage] = useState('');

  useEffect(() => {
    if (isOpen) {
      fetchFriends();
      checkArchiveStatus();
      // –ê–≤—Ç–æ-–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
      const timer = setTimeout(() => {
        onClose();
      }, 30000);
      
      return () => clearTimeout(timer);
    }
  }, [isOpen]);

  const fetchFriends = async () => {
    try {
      const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');
      if (!token) return;

      const response = await fetch('http://localhost:8000/api/users/friends/', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        setFriends(data.results || data || []);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π:', error);
    }
  };

  const checkArchiveStatus = async () => {
    try {
      const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –ø–æ—Å—Ç–∞:', post?.title);
      console.log('–¢–æ–∫–µ–Ω:', token ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
      if (!token || !post) return;

      const response = await fetch(`http://localhost:8000/api/posts/${post.slug}/archive-status/`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        console.log('üìã –°—Ç–∞—Ç—É—Å –∞—Ä—Ö–∏–≤–∞:', data);
        setIsInArchive(data.is_in_archive || false);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä—Ö–∏–≤–∞:', response.status);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä—Ö–∏–≤–∞:', error);
    }
  };

  const handleShareToFriends = async () => {
    if (selectedFriends.length === 0) return;

    setLoading(true);
    try {
      const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');
      
      const promises = selectedFriends.map(friendId => 
        fetch('http://localhost:8000/api/users/send-post/', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            recipient_id: friendId,
            post_slug: post.slug,
            message: message
          })
        })
      );

      await Promise.all(promises);
      setSuccessMessage(`–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ${selectedFriends.length} –¥—Ä—É–≥—É!`);
      setSelectedFriends([]);
      setMessage('');
      
      setTimeout(() => {
        onClose();
      }, 2000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞:', error);
      setSuccessMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleAddToArchive = async () => {
    if (isInArchive) return; // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª—è—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞

    setLoading(true);
    try {
      const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');
      
      const response = await fetch(`http://localhost:8000/api/posts/${post.slug}/toggle-archive/`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        setIsInArchive(true);
        setSuccessMessage('–ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤!');
        
        setTimeout(() => {
          onClose();
        }, 2000);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–æ–º:', error);
      setSuccessMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∞—Ä—Ö–∏–≤');
    } finally {
      setLoading(false);
    }
  };

  const toggleFriendSelection = (friendId) => {
    setSelectedFriends(prev => 
      prev.includes(friendId) 
        ? prev.filter(id => id !== friendId)
        : [...prev, friendId]
    );
  };

  const filteredFriends = friends.filter(friend => 
    friend.first_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    friend.last_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    friend.username?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  if (!isOpen) return null;

  return (
    <div className="share-modal-overlay" onClick={onClose}>
      <div className="share-modal" onClick={e => e.stopPropagation()}>
        <div className="share-modal-header">
          <div className="share-modal-title">
            <FontAwesomeIcon icon={faShare} className="share-icon" />
            <h3>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ—Å—Ç–æ–º</h3>
          </div>
          <button className="close-btn" onClick={onClose}>
            <FontAwesomeIcon icon={faTimes} />
          </button>
        </div>

        {successMessage && (
          <div className="success-message">
            <FontAwesomeIcon icon={faCheck} />
            {successMessage}
          </div>
        )}

        <div className="share-modal-tabs">
          <button 
            className={`tab-btn ${activeTab === 'friends' ? 'active' : ''}`}
            onClick={() => setActiveTab('friends')}
          >
            <FontAwesomeIcon icon={faUserFriends} />
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É
          </button>
          <button 
            className={`tab-btn ${activeTab === 'archive' ? 'active' : ''}`}
            onClick={() => setActiveTab('archive')}
          >
            <FontAwesomeIcon icon={faBookmark} />
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
        </div>

        {activeTab === 'friends' && (
          <div className="share-friends-tab">
            <div className="search-container">
              <FontAwesomeIcon icon={faSearch} className="search-icon" />
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –¥—Ä—É–∑–µ–π..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="search-input"
              />
            </div>

            <div className="friends-list">
              {filteredFriends.length > 0 ? (
                filteredFriends.map(friend => (
                  <div 
                    key={friend.id} 
                    className={`friend-item ${selectedFriends.includes(friend.id) ? 'selected' : ''}`}
                    onClick={() => toggleFriendSelection(friend.id)}
                  >
                    <div className="friend-avatar">
                      {friend.avatar ? (
                        <img src={friend.avatar} alt={friend.first_name} />
                      ) : (
                        <div className="friend-initials">
                          {`${friend.first_name?.charAt(0) || ''}${friend.last_name?.charAt(0) || ''}`}
                        </div>
                      )}
                    </div>
                    <div className="friend-info">
                      <div className="friend-name">
                        {friend.first_name} {friend.last_name}
                      </div>
                      <div className="friend-username">
                        @{friend.username}
                      </div>
                    </div>
                    {selectedFriends.includes(friend.id) && (
                      <FontAwesomeIcon icon={faCheck} className="check-icon" />
                    )}
                  </div>
                ))
              ) : (
                <div className="no-friends">
                  <FontAwesomeIcon icon={faUserFriends} className="no-friends-icon" />
                  <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</p>
                  <span>–î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è –ø–æ—Å—Ç–∞–º–∏</span>
                </div>
              )}
            </div>

            {selectedFriends.length > 0 && (
              <div className="share-actions">
                <textarea
                  placeholder="–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)..."
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  className="message-input"
                  rows="3"
                />
                <button 
                  className="share-btn"
                  onClick={handleShareToFriends}
                  disabled={loading}
                >
                  {loading ? (
                    <>
                      <div className="loading-spinner"></div>
                      –û—Ç–ø—Ä–∞–≤–∫–∞...
                    </>
                  ) : (
                    <>
                      <FontAwesomeIcon icon={faShare} />
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å {selectedFriends.length} –¥—Ä—É–≥—É
                    </>
                  )}
                </button>
              </div>
            )}
          </div>
        )}

        {activeTab === 'archive' && (
          <div className="share-archive-tab">
            <div className="archive-info">
              <FontAwesomeIcon icon={faBookmark} className="archive-icon" />
              <h4>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤</h4>
              <p>
                {isInArchive 
                  ? '–≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–º –∞—Ä—Ö–∏–≤–µ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê—Ä—Ö–∏–≤".'
                  : '–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤ —Å–≤–æ–π –∞—Ä—Ö–∏–≤, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –µ–≥–æ –ø–æ–∑–∂–µ.'
                }
              </p>
            </div>
            
            {!isInArchive && (
              <button 
                className="archive-btn add"
                onClick={handleAddToArchive}
                disabled={loading}
              >
                {loading ? (
                  <>
                    <div className="loading-spinner"></div>
                    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...
                  </>
                ) : (
                  <>
                    <FontAwesomeIcon icon={faBookmark} />
                    –î–æ–±–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤
                  </>
                )}
              </button>
            )}
            
            {isInArchive && (
              <div className="already-archived">
                <FontAwesomeIcon icon={faCheck} />
                <span>–ü–æ—Å—Ç —É–∂–µ –≤ –∞—Ä—Ö–∏–≤–µ</span>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ShareModal;
